/* eslint-disable @lwc/lwc/no-api-reassignments */
import { LightningElement, wire, api } from 'lwc';
import { CurrentPageReference, NavigationMixin } from 'lightning/navigation';

const WAIVERFIELDSCOL1 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

const WAIVERFIELDSCOL2 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

const WAIVERFIELDSCOL3 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

const WAIVERFIELDSCOL4 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

const WAIVERFIELDSCOL5 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

const WAIVERFIELDSCOL6 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

export default class WaiversRecordPage extends LightningElement {

    @api recordId;
    @api objectApiName;
    _fields = [];

    get waiverFields() {
        return {
            col1: WAIVERFIELDSCOL1,
            col2: WAIVERFIELDSCOL2,
            col3: WAIVERFIELDSCOL3,
            col4: WAIVERFIELDSCOL4,
            col5: WAIVERFIELDSCOL5,
            col6: WAIVERFIELDSCOL6,
        }
    }

    get contactFields() {
        return {
            col1: WAIVERFIELDSCOL1,
            col2: WAIVERFIELDSCOL2,
            col3: WAIVERFIELDSCOL3,
            col4: WAIVERFIELDSCOL4,
            col5: WAIVERFIELDSCOL5,
            col6: WAIVERFIELDSCOL6,
        }

    }

    get approvalFields() {
        return {
            col1: WAIVERFIELDSCOL1,
            col2: WAIVERFIELDSCOL2,
            col3: WAIVERFIELDSCOL3,
            col4: WAIVERFIELDSCOL4,
            col5: WAIVERFIELDSCOL5,
            col6: WAIVERFIELDSCOL6,
        }
    }

    get historyFields() {
        return {
            col1: WAIVERFIELDSCOL1,
            col2: WAIVERFIELDSCOL2,
            col3: WAIVERFIELDSCOL3,
            col4: WAIVERFIELDSCOL4,
            col5: WAIVERFIELDSCOL5,
            col6: WAIVERFIELDSCOL6,
        }
    }

    @wire(CurrentPageReference)
    getPageReferenceParameters(currentPageReference) {
        if (!this.recordId && !this.objectApiName) {
            if (currentPageReference.attributes?.recordId) {
                this.recordId = currentPageReference.attributes.recordId;
            }
            if (currentPageReference.attributes?.objectApiName) {
                this.objectApiName = currentPageReference.attributes.objectApiName;
            }
        }
    }

    connectedCallback() {
        console.log(this.recordId, '====', this.objectApiName);
    }

    handleActions(event) {
        const actionName = event.target.dataset.action;
        console.log('actionName', actionName);
        switch (actionName) {
            case 'edit':
                this.handleEdit(event);
                break;
            case 'approval':
                this.handleApproval(event);
                break;
            case 'withdraw':
                this.handleWithdraw(event);
                break;
            default:
                break;
        }
    }

    handleEdit(event) {

    }

    handleApproval(event) {

    }

    handleWithdraw(event) {

    }

    handleSectionToggle(event) {
        const openSections = event.detail.openSections;
        if (openSections.length === 0) {
            this.activeSectionsMessage = 'All sections are closed';
        } else {
            this.activeSectionsMessage =
                'Open sections: ' + openSections.join(', ');
        }
    }


}
