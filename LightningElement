<template>
    <lightning-layout multiple-rows class="tab-container" vertical-align="stretch">
        <template if:true={showFilter}>
            <lightning-layout-item size="12" padding="around-small" class="slds-color__background_gray-2">
                
                <!-- Search + Picklists -->
                <lightning-layout multiple-rows>
                    <lightning-layout-item size="12">
                        <lightning-input class="slds-size_1-of-1"
                            name="search" 
                            label="Search"
                            type="search" 
                            onchange={handleReset} 
                            onkeyup={handleSearch} 
                            value={searchKey}>
                        </lightning-input>
                    </lightning-layout-item>

                    <lightning-layout-item size="12" class="slds-p-bottom_small">
                        <lightning-combobox 
                            label="Filter by:" 
                            class="slds-size_1-of-1" 
                            title="Waivers List"
                            value={selectedWaiver} 
                            options={waiverOptions} 
                            onchange={handleWaiverChange}>
                        </lightning-combobox>
                    </lightning-layout-item>

                    <lightning-layout-item size="12" >
                        <c-technology-decision-custom-pick 
                            class="slds-size_1-of-1"
                            onselectionchange={handleActionsPicklist}>
                        </c-technology-decision-custom-pick>
                    </lightning-layout-item>
                </lightning-layout>

                <!-- Filter values -->
                <template if:true={showFilterValues}>
                    <lightning-input 
                        class="slds-size_1-of-1"
                        label="Search Filter" 
                        placeholder="Type to search..." 
                        onchange={handleFilterSearch}>
                    </lightning-input>

                    <div class="slds-card">
                        <template for:each={filteredFieldValues} for:item="filteredFieldValue">
                            <div key={filteredFieldValue.id} class="filter-section slds-m-bottom_medium slds-p-around_small slds-box slds-theme_default">
                                <div class="slds-grid slds-align--spread slds-wrap">
                                    <div class="slds-col slds-text-title_bold">{filteredFieldValue.filterField}</div>
                                        <lightning-button-icon 
                                            class="slds-col_bump-left"
                                            icon-name={filteredFieldValue.icon} 
                                            size="small" 
                                            variant="bare" 
                                            onclick={handleFilterExpand}
                                            data-action="filterbyexpand" 
                                            data-index={filteredFieldValue.id}>
                                        </lightning-button-icon>
                                   

                                    <lightning-checkbox-group if:true={filteredFieldValue.showValues}
                                        class="slds-size_1-of-1"
                                        name="filterValue" 
                                        options={filteredFieldValue.filteredFieldValue}
                                        data-action={filteredFieldValue.filterFieldApiName} 
                                        data-index={filteredFieldValue.id}
                                        onchange={handleActions} 
                                        value={filteredFieldValue.selectedValue}
                                        key={filteredFieldValue.uniqueKey}>
                                    </lightning-checkbox-group>
                            </div>
                           </div>
                        </template>
                    </div>
                </template>

                <!-- Reset button -->
                <div class="slds-grid slds-grid_align-end slds-m-top_large">
                    <lightning-button 
                        label="Reset" 
                        variant="neutral" 
                        data-action="resetfilter"
                        onclick={handleResetButton}>
                    </lightning-button>
                </div>

                <!-- Spinner -->
                <template if:true={isLoadingFilter}>
                    <lightning-spinner alternative-text="Loading"></lightning-spinner>
                </template>

            </lightning-layout-item>
        </template>
    </lightning-layout>
</template>

import { LightningElement, track } from 'lwc';
import getTechnologyDecision from '@salesforce/apex/TechnologyDecision_DataTableHandler.getTechnologyDecision';
import getUniqueValues from '@salesforce/apex/TechnologyDecision_DataTableHandler.getUniqueValues';
export default class TechnologyDecisionDataFilters extends LightningElement {
    searchKey;
    isLoading;
    currentPage;
    rowOffSet;
    records=[];
    
    sortedBy;
    sortedDirection;
    @track selectedFilters;
    @track selectedWaiver = 'mydecision';
    @track _filteredFieldValues = [];
    @track _filterOptions = [];
    filters = [];
    @track selectedFiltersdata = {};
    @track showFilter = true; 
    get filteredFieldValues() {
        console.log('this._filteredFieldValues filteredFieldValues 247' + JSON.stringify(this._filteredFieldValues));
        return this._filteredFieldValues;
        }
    get showFilterValues() {
        return this._filteredFieldValues.length > 0;
    }
    get waiverOptions() {
        return [
            { label: 'My Decisons', value: 'mydecision' },
            { label: 'All Decisons', value: 'alldecision' }
        ];
    }
   
handleSearch(event) {
       
}
 handleWaiverChange(event) {
        this.currentPage = 1;
        this.searchKey = '';
        //this.resetPaginationState();
        if(event.detail.value){
        this.selectedWaiver = event.detail.value;
        }
        console.log('this.selectedWaiver 421 ' + this.selectedWaiver);
        this.loading = true;
        this.isFromhandleWaiverChange=true;
        //this.handleFilterBy('resetfilter');
        // Dispatch the clean array version to parent
                this.dispatchEvent(
                    new CustomEvent('decisiondata', {
                        detail: { value: this.selectedWaiver }
                    })
                );
    }
    handleReset(event){
        
         window.clearTimeout(this.delayTimeout);
        this.searchKey = event.target.value.toLowerCase() ?? '';
        console.log('this.searchKey ',this.searchKey);
        this.delayTimeout = setTimeout(() => {
            this.isLoading = true;
            //this.resetPaginationState();
            this.currentPage = 1;

            /*Lazy Loading*/
            this.rowOffSet = 0;
            this.records = [];
            /*Lazy Loading*/

             // Dispatch the clean array version to parent
                this.dispatchEvent(
                    new CustomEvent('searchkey', {
                        detail: { value: this.searchKey }
                    })
                );
        }, 300);
    }
 resetPaginationState() {
        this.isLoading = true;
        this.sortedBy = 'Name';
        this.sortedDirection = 'asc';
    }
    handleActionsPicklist(event){
    const selectedValues = event.detail.values;
    console.log('Selected values from child: ', JSON.stringify(selectedValues));

    this.selectedFilters = selectedValues;

    getUniqueValues({
        fieldApiName: this.selectedFilters,
        allOrMy: this.selectedWaiver
    })
    .then(data => {
        console.log('Apex result :', JSON.stringify(data));
        
        const values = (data) ? Object.keys(data).map(x => {
            return {
                [x]: data[x].map((val) => {
                    const label = val.value ? val.value : 'No Data';
                    const value = val.value ? val.value : 'nullcheck';
                    const id = val.id ? val.id : 'nullcheck';
                    return { label: `${label} (${val.count})`, value: value, id: id};
                })
            };
        }).filter(Boolean) : [];

        let filteredFieldValues = values.map((x, ind) => {
            const apiName = Object.keys(x)[0];
            const options = Object.values(x)[0]
                .sort((a, b) => {
                    const valueA = (a.value || '').trim().toLowerCase();
                    const valueB = (b.value || '').trim().toLowerCase();
                    if (valueA === 'nullcheck') return -1;
                    if (valueB === 'nullcheck') return 1;
                    return valueA.localeCompare(valueB);
                });

            return {
                id: ind,
                filterField: apiName,
                filterFieldApiName: apiName,
                filteredFieldValue: options,
                showValues: true,
                // ✅ restore from saved selections
                selectedValue: this.selectedFiltersdata[apiName] || [],
                icon: 'utility:chevrondown',
            };
        });

        console.log('Filtered Field Values:', JSON.stringify(filteredFieldValues));

        this._filteredFieldValues = [...filteredFieldValues];
        this.isLoadingFilter = false;
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

    handleActions(event){ 
    const apiName = event.target.dataset.action;   // filterFieldApiName
    const values = event.detail.value;             // selected values array

    if (values && values.length > 0) {
        this.selectedFiltersdata = {
            ...this.selectedFiltersdata,
            [apiName]: values
        };
    } else {
        const { [apiName]: removed, ...rest } = this.selectedFiltersdata;
        this.selectedFiltersdata = rest;
    }

    // ✅ Sync _filteredFieldValues so UI keeps checked items
    this._filteredFieldValues = this._filteredFieldValues.map(f => {
        if (f.filterFieldApiName === apiName) {
            return { ...f, selectedValue: this.selectedFiltersdata[apiName] || [] };
        }
        return f;
    });

    // Dispatch clean array to parent
    this.dispatchEvent(
        new CustomEvent('filterdata', {
            detail: { value: this.selectedFiltersArray }
        })
    );

    console.log('Selected Filters Map:', JSON.stringify(this.selectedFiltersdata));
    console.log('Selected Filters Array:', JSON.stringify(this.selectedFiltersArray));
}

     // Convert to array format [{ key, values }]
   get selectedFiltersArray() {
        return Object.keys(this.selectedFiltersdata).map(key => {
            return { [key]: this.selectedFiltersdata[key] };
        });
    }
    handleResetButton(event){
        this._filteredFieldValues=[];
        this.dispatchEvent(new CustomEvent('handlerestbuttonclick'));
    }
    handlefilterToggle(event){
         this.showFilter = !this.showFilter;  // toggle between true/false
    }
    handleFilterExpand(event){
            
            console.log('index', event.currentTarget.dataset.index);
            
           // defensive: event.currentTarget.dataset might be undefined in some event propagation cases
        const ds = (event.currentTarget && event.currentTarget.dataset) || (event.target && event.target.dataset);
        if (!ds || typeof ds.index === 'undefined') {
            // debug - helpful to open browser console to see why click didn't carry data-index
            // eslint-disable-next-line no-console
            console.warn('toggleFilter: data-index not found on event target', event);
            return;
        }

        const index = Number(ds.index); // convert to number to match ids like 0,1,2

        // Create a new array copying objects; update only the clicked item
        const newArray = this._filteredFieldValues.map(item => {
            if (Number(item.id) === index) {
                const newShow = !item.showValues;
                // return a new object (important for reactivity)
                return {
                    ...item,
                    showValues: newShow,
                    icon: newShow ? 'utility:chevrondown' : 'utility:chevronright'
                };
            }
            return { ...item }; // shallow copy of unchanged items
        });

        // Assign the new array back to the tracked private field
        this._filteredFieldValues = newArray;
    }

}

/*Added on Feb 6th 2025*/
.button-container {
    text-align: right;
     position: sticky;
     bottom: 5px;
}
/*Added on Feb 6th 2025*/

.container {
    position: absolute; /* position absolute and negative margin allows us to position our component */
    background-color: white;
}

.filter-button {
    top: 15rem;
    z-index: 1000;
    left: 0rem;
    opacity: 60%;
}

.filter-button:hover {
    opacity: 100%;
}

.background-white {
    background-color: white;
}

.min-height-container {
    min-height: 630px; /* Adjust this height as needed */
    display: flex;
    flex-direction: column;
}
.hidden {
    display: none;
}

/* Add padding to create space for sub-checkboxes */
.sub-option {
    padding-left: 20px; /* Adjust the value as needed */
}

.sub-option .slds-checkbox {
    margin-left: 5px; /* Optional: You can tweak this to match your design */
}


.sub-options-list {
    margin-left: 2rem; /* Adjust as needed for proper spacing */
}
.sub-option {
    padding-left: 1rem; /* Additional space between sub-options */
}



.slds-card__header {
    padding-top: 0px;
}

.tab-container {
    height: 100%;
    overflow-y: auto;
   
   
}
.customtable{
  width:82.8%;
  padding-left: 10px;
  background-color: #b0c4de;
  overflow-y: auto;
  max-height: 100%;
}
.testclass{
        --lwc-colorTextIconDefault: yellow;
}

.truncate-text {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 10px;
    display: inline-block;
}
.viewport {
  height: 100vh;
  display: flex;
  flex-direction: column;
}
/* child.css */
.child-container {
    flex: 1;                 /* take available space */
    min-height: 0;           /* ⚠️ important so scroll works inside flex */
    overflow-y: auto;        /* scroll only when needed */
}




/* optional - improve spacing for checkbox groups */
lightning-checkbox-group {
    margin-top: 0.5rem;
    padding-bottom: 10px;
}
/* Neutralize outer slds-card so it does not produce the grey box */
.slds-card {
  background: transparent !important;
  box-shadow: none !important;
  border: none !important;
  padding: 0 !important;
}

/* Keep the card-like appearance on each filter section */
.filter-section {
  background-color: #ffffff;          /* white card */
  border-radius: 8px;                 /* rounded corners */
  box-shadow: 0 1px 4px rgba(0,0,0,0.06);
  padding: 0rem;
  margin-bottom: 1rem;                /* gap between sections */
}

/* title row spacing */
.filter-section .slds-grid {
  padding-bottom: 0.1rem;
}

/* tighten the search filter wrapper if used */
.filters-wrapper {
  padding: 0.5rem 0;
}

