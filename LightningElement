async fetchDataAsync() {
        console.log('this.selectedWaiver in fetchDataAsync 284 ' + this.selectedWaiver);
        getWaiverRecords({
            searchKey: this.searchKey,
            sortBy: this.sortedBy,
            sortOrder: this.sortedDirection,
            pageSize: this.currentPageSize,
            first: this.first,
            after: this.after,
            lastId: this.lastId,
            before: this.before,
            firstId: this.firstId,
            last: this.last,
            lastPageSize: this.lastPageSize,
            allOrMy: this.selectedWaiver,
            filters: JSON.stringify(this.filters)
        }).then((data) => {
            console.log('this.initialRecords length in fetchDataAsync 300 ' + this.initialRecords);
            if (this.initialRecords.length === 0) {
                this.initialRecords = data.waiverRecords;
            }
            console.log('data in fetchDataAsync 304 ' + JSON.stringify(data));
            const filteredRecords = data.waiverRecords.filter((record) => {
                return record.Waiver_Id__r; 
            });

            const records = data.waiverRecords.map((record) => {
                return {
                    ...record,
                    Name: record.Waiver_Id__r?.Name ?? '',
                    Requesting_Portfolio__c: record.Waiver_Id__r?.Requesting_Portfolio__c ?? '',
                    Waiver_Reason__c: record.Waiver_Id__r?.Waiver_Reason__c ?? '',
                    Status__c: record.Waiver_Id__r?.Status__c ?? '',
                    Standard_Page_Title__c: record.Waiver_Id__r?.Standard_Page_Title__c ?? '',
                };
            });
            this.records = records;
            this.totalRecords = data.waiverRecordsCount;
            this.totalPages = Math.ceil(data.waiverRecordsCount / this.currentPageSize);
            this.isLoading = false;

            // Sort records based on the selected field (handling nested fields)
            this.records = [...records].sort((a, b) => {
                let valA = this.getNestedValue(a, this.sortedBy);
                let valB = this.getNestedValue(b, this.sortedBy);

                valA = valA ? valA.toString().toLowerCase() : '';
                valB = valB ? valB.toString().toLowerCase() : '';

                if (valA < valB) {
                    return this.sortedDirection === 'asc' ? -1 : 1;
                } else if (valA > valB) {
                    return this.sortedDirection === 'asc' ? 1 : -1;
                }
                return 0;
            });

            console.log('Sorted records:', this.records);

        }).catch((error) => {
            console.error(error);
            this.isLoading = false;
        });
    }

    // Helper function to get nested values
    getNestedValue(record, field) {
        const fields = field.split('.');
        let value = record;
        for (let i = 0; i < fields.length; i++) {
            if (value) {
                value = value[fields[i]];
            } else {
                return undefined;
            }
        }
        return value;
    }
