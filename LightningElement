handleFilterSearch(event) {
        const searchKey = event.target.value.toLowerCase();
        //let filternames ='Requesting Application;Affected Standard'
        const selectedFilter = (this.selectedFilter.split(';'));
         getUniqueValues({ fieldApiName: selectedFilter, allOrMy: this.selectedWaiver }).then((data) => {
                        const values = (data) ? Object.keys(data).map(x => {
                            if (x !== 'PortfolioDomains') {
                                return {
                                    [x]: data[x].map((val) => {
                                        //return { label: (val.value + ' (' + val.count + ')'), value: val.value };
                                        const label = val.value ? val.value : 'No Data';
                                        const value = val.value ? val.value : 'nullcheck';
                                        const id = val.id ? val.id : 'nullcheck';
                                        return { label: `${label} (${val.count})`, value: value, id: id };
                                    })
                                }
                            }
                        }).filter(Boolean) : [];
                        console.log('Processed Values:', values);
                        let filteredFieldValues = values.map((x, ind) => {
                            this.listOfArray=[];
                             this._filteredFieldValues.forEach(selVal => {
                            if(selVal["filterField"] == (this._filterOptions.filter(t => t.value === Object.keys(x)[0])[0].label) && selectedFilter.includes(selVal["filterField"])){
                               // console.log(JSON.stringify(selVal["selectedValue"]));
                                this.listOfArray = selVal["selectedValue"];
                                console.log(JSON.stringify(this.listOfArray));
                            }});
                            
                            console.log('Processed selectedValue:', JSON.stringify(x));
                            return {
                                id: ind,
                                filterField: (this._filterOptions.filter(t => t.value === Object.keys(x)[0])[0].label),
                                filterFieldApiName: Object.keys(x)[0],
                                filteredFieldValue: Object.values(x)[0]
                                    .sort((a, b) => {
                                        const valueA = (a.value || '').trim().toLowerCase();
                                        const valueB = (b.value || '').trim().toLowerCase();
                                        if (valueA === 'nullcheck') return -1;
                                        if (valueB === 'nullcheck') return 1;
                                        return valueA.localeCompare(valueB); // Alphabetical for others
                                    }),
                                showValues: true, //making true to expand the filter options
                                selectedValue: this.listOfArray,
                                icon: 'utility:chevrondown'
                            };
                        });
                        console.log('Filtered Field Values (sorted by value):', JSON.stringify(filteredFieldValues));

                        this._filteredFieldValues = [...filteredFieldValues];
                        
        console.log('searchKey ',searchKey);
        console.log('checking here 586', JSON.stringify(this._filteredFieldValues[0].filteredFieldValue));
        console.log('checking here 587', JSON.stringify(this._filteredFieldValues));
        const filteredData = this._filteredFieldValues.map(filterObj => {
        const filteredValues = filterObj.filteredFieldValue.filter(option =>
                 option.label.toLowerCase().includes(searchKey.toLowerCase())
        );
        return {
            ...filterObj,
            filteredFieldValue: filteredValues
            };
        });

        console.log(filteredData);
        console.log('checking here 599', JSON.stringify(filteredData));
        this._filteredFieldValues=filteredData;
                        
         }).catch((error) => {
                        console.error(error);
                       
        });
