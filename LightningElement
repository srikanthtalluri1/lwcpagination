import { LightningElement, track, wire } from 'lwc';
import { CurrentPageReference, NavigationMixin } from 'lightning/navigation';
import { loadStyle } from 'lightning/platformResourceLoader';
import NoHeader from '@salesforce/resourceUrl/NoHeader';
import getWaiverRecords from '@salesforce/apex/AWP_WaiverHandlerClass.getWaiverRecordAndPermissions';
import getFilterDetails from '@salesforce/apex/AWP_WaiverHandlerClass.getFilterDetails';
import getUniqueValues from '@salesforce/apex/AWP_WaiverHandlerClass.getUniqueValues';
import getOnLoadRecordData from '@salesforce/apex/AWP_WaiverHandlerClass.getRecordonLoad'; //Srikant
import getRelationship from '@salesforce/apex/AWP_WaiverHandlerClass.getRelationship'; //Srikant
//import getFilterDetailsSelected from '@salesforce/apex/AWP_WaiverHandlerClass.getFilterDetailsSelected';

import getStagePicklistValues from '@salesforce/apex/AWP_WaiverHandlerClass.getStagePicklistValues';

import pubsub from 'c/pubsub'; 

const COLUMNS = [
    {
        label: 'Name',
        fieldName: 'Name',
        sortable: true,
        type: 'customText',
        typeAttributes: {
            // class: 'slds-text-link',
            recordId: {
                fieldName: 'Waiver_Id__c'
            }
        },
    },
    {
        label: 'Requesting Portfolio',
        fieldName: 'Requesting_Portfolio__c',
        sortable: true
    },
    {
        label: 'Affected Standard',/*Feb 15th Changes*/
        fieldName: 'Affected_Standard_Portfolio__c',/*Feb 15th Changes. **Srikant 8 April*/ 
        sortable: true
    },
    { label: 'Waiver Reason', fieldName: 'Waiver_Reason__c', sortable: true },
    //{ label: 'Status', fieldName: 'Status__c', sortable: true },
    { label: 'Type', fieldName: 'Type__c', sortable: true },
    {
        label: 'Waiver Expiration Date',
        fieldName: 'waiverExpirationDate',
        sortable: true,
        type: 'customWaiverExpiration',
        typeAttributes: {
            Waiver_Expiration_Date__c: { fieldName: 'Waiver_Expiration_Date__c' }, // Pass the field value
            expirationIconName: { fieldName: 'expirationIconName' },
            expirationHelpText: { fieldName: 'expirationHelpText' },
            expirationIconClass: { fieldName: 'expirationIconClass' }
        }
    },
    {
        label: 'Renew Counter',
        fieldName: 'renewCounter',
        sortable: true,
        type: 'customRenewCounter',
        typeAttributes: {
            Renew_Counter__c: { fieldName: 'Renew_Counter__c' }, // Pass the field value
            iconName: { fieldName: 'iconName' },
            helpText: { fieldName: 'helpText' },
            iconClass: { fieldName: 'iconClass' }
        }
    },
    //{ label: 'Stage', fieldName: 'Stage__c', sortable: true },
    {
        label: 'Standard Page Title',
        fieldName: 'Standard_Page_Title__c',
        sortable: true
    },
    {
        label: 'Status & Stage',
        fieldName: 'statusStage',
        sortable: true,
        type: 'customStatusStage',
        typeAttributes: {},
        cellAttributes: {
            class: 'slds-grid slds-grid_align-spread slds-grid_vertical-align-center'
        }
    },
    // { label: 'Requesting TPM', fieldName: 'Requesting_TPM__c', sortable: true },
    // { label: 'Application Name', fieldName: 'App_Name__c', sortable: true },
    // { label: 'Renew Counter', fieldName: 'Renew_Counter__c', sortable: true },
    // {
    //     type: 'action',
    //     typeAttributes: {
    //         rowActions: [
    //             { label: 'View', name: 'view' }
    //         ]
    //     },
    // }
];

const PAGESIZE = [
    { label: '10', value: 10 },
    { label: '20', value: 20 },
    { label: '30', value: 30 },
    { label: '40', value: 40 },
    { label: '50', value: 50 }
];

export default class AwpWaiverListViewLeftNav extends NavigationMixin(LightningElement) {

    /*Stage Labels*/
    stageLabelMap = {};
    @wire(getStagePicklistValues)
    wiredPicklistValues({ data, error }) {
        if (data) {
            this.stageLabelMap = data;
            
            console.log('Stage Label Map:', this.stageLabelMap);
            this.fetchData1('connectedCall');
        } else if (error) {
            console.error('Error fetching picklist values:', error);
        }
    }
    /*Stage Labels*/

    @track records = [];
    columns = COLUMNS;
    isLoading = true;
    currentPage = 1;
    totalRecords;
    totalPages;
    sortedBy = 'Waiver_Id__r.Requesting_Portfolio__c';
    sortedDirection = 'asc';
    initialRecords = [];
    selectedWaiver = 'allwaivers';
    _tableSize = '9';
    tableStyle = 'width:82.8%;padding-left: 10px;background-color: #b0c4de;overflow-y: auto;';//flex-grow: 1;display: flex;flex-direction: column;padding-left: 10px;overflow-y: auto;background-color: #b0c4de;
    recordViewStyle = 'width:65%;background-color: white;';
    blueStyle = 'width:0.5%;padding-block: 40vh; background-color: #b0c4de';
    _recordViewSize = '9';
    _leftNavSize = '2';
    showFilter = true;
    showRecord = false;
    // showFilterToggle = false;
    // showFilterToggleClicked = false;
    recordId;
    @track _filterOptions = [];
    selectedFilter;
    filterBy = [];
    @track _filteredFieldValues = [];
    isLoadingFilter = false;
    filters = [];
    valueFalse = false;
    generatedFilterLink = '';
    showShareLinkModal = false;
    selectedRecordName = '';
    showNewRecordModal = false;
    height;

    // Pagination state
    first = true;
    after = 'NULL';
    lastId = '';
    before = '';
    firstId = '';
    last = false;
    lastPageSize = 0;
    currentPageSize = 30;
    // END
    @track recordName; //Srikant as part of loading Issue
    relationShipId; //Srikant
    /*Handling Event*/
    @track editClick = false;
    handleEditClick(event) {
        // Capturing the editClick value from the child event
        this.editClick = event.detail.editClick;
        console.log('this.editClick in parent ' + this.editClick);
    }
    /*Handling Event*/

    get filterCardClass() {
        return this.showFilter ? '' : 'hidden';
    }

    get noRecordsFound() {
        return this.records.length === 0;
    }

    get pageSizeOptions() {
        return PAGESIZE;
    }

    get showPaginationBar() {
        return this.totalPages > 1;
    }

    get isFirstPage() {
        return this.currentPage === 1;
    }

    get isLastPage() {
        return this.currentPage === this.totalPages;
    }

    get rowNumberOffset() {
        return (this.currentPage - 1) * this.currentPageSize;
    }

    get waiverOptions() {
        return [
            { label: 'My Waivers', value: 'mywaivers' },
            { label: 'All Waivers', value: 'allwaivers' }
        ];
    }

    get selectedWaiverLabel() {
        return this.selectedWaiver === 'mywaivers' ? 'My Waivers' : 'All Waivers';
    }

    get tableSize() {
        return this._tableSize;
    }

    get leftNavSize() {
        return this._leftNavSize;
    }

    // get tableSizeClass() {
    //     return this._tableSize === '10' ? 'slds-size_10-of-12 slds-col slds-border_left slds-border_right' : (this._tableSize === '2' ? 'slds-size_2-of-12 slds-col slds-border_left slds-border_right' : 'slds-size_12-of-12 slds-col slds-border_left slds-border_right');
    // }

    // get recordViewSizeClass() {
    //     return this._recordViewSize === '10' ? 'slds-size_10-of-12 slds-col slds-border_left slds-border_right' : 'slds-size_12-of-12 slds-col slds-border_left slds-border_right';
    // }

    get recordViewSize() {
        return this._recordViewSize;
    }

    get rowActions() {
        return [
            { label: 'View', name: 'view' }
        ];
    }

    get filterOptions() {
        return this._filterOptions;
    }

    get filteredFieldValues() {
        console.log('this._filteredFieldValues ' + JSON.stringify(this._filteredFieldValues));
        return this._filteredFieldValues;
    }

    get showFilterValues() {
        return this._filteredFieldValues.length > 0;
    }

    get recordName() {
        return `${this.selectedRecordName}`;
    }

    @wire(CurrentPageReference)
    getPageReferenceParameters(currentPageReference) {
        if (currentPageReference) {
            this.selectedFilter = (currentPageReference.state.c__filterValues ? currentPageReference.state.c__filterValues : '');
            this.selectedWaiver = (currentPageReference.state.c__all === 'true') ? 'allwaivers' : 'mywaivers';
        }
    }

    /*Srikanth Open Url Changes*/
    @track windowUrl;
    /*Srikanth Open Url Changes*/

    /*Lazy Loading*/
    rowLimit =5;
    rowOffSet=0;
    hasMoreData;
    /*Lazy Loading*/

    connectedCallback() {
        /*Srikanth Open Url Changes*/
        this.windowUrl = new URL(window.location.href);
        this.setSelectedWaiverFromURL();
        /*Srikanth Open Url Changes*/
        //this.fetchData1('connectedCall');
        this.fetchFilterDetails();
        loadStyle(this, NoHeader);
        /*Srikanth Sub-Tab Changes*/
        pubsub.subscribe('clickedTab', this.handleNavigate.bind(this));
        /*Srikanth Sub-Tab Changes*/

        pubsub.subscribe('closeSuccess', this.handleCloseNavigate.bind(this));
        //Srikant Changes for Refresh Issue
        let pathName= this.windowUrl.pathname;
        let converstring = pathName.toString();
        console.log('converstring ',converstring);
        let resultstring = converstring.substring(converstring.lastIndexOf("/")+1);
        console.log('resultstring ',resultstring);
        if(resultstring.includes('a1d')){
            this.handleOnLoadView(resultstring, 'view');
        }
        //Srikant Changes for Refresh Issue
    }


    /*Srikanth Sub-Tab Changes*/
    @track showSpinner = false;
    @track clickedTabId;
    handleNavigate(event) {
        this.showSpinner = true;
        console.log('clickedTab event fired 26'+JSON.stringify(event));
        const clickedTabId = event;
        this.clickedTabId = clickedTabId.toLowerCase();
        console.log('this.clickedTabId 232 '+this.clickedTabId);

        if (this.clickedTabId.includes('business')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Business';
        }
        else if (this.clickedTabId.includes('data')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Data';
        }
        else if (this.clickedTabId.includes('application')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Application';
        }
        else if (this.clickedTabId.includes('technology')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Technology';
        }
        else if (this.clickedTabId.includes('operation')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Operation';
        }
        else if (this.clickedTabId.includes('security')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Security';
        }
        else if (this.clickedTabId.includes('accessibility')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Accessibility';
        }
        else if (this.clickedTabId.includes('communication')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Communication';
        }
        else if (this.clickedTabId.includes('design')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Design';
        }
        else if(this.clickedTabId.includes('allwaivers')){
            this.selectedWaiver = 'allwaivers';
            this.tab = 'All_Waivers';
        }
        else {
            this.selectedWaiver = 'mywaivers';
            this.tab = '';
        }
        this.records = [];
        this.rowOffSet = 0;
        this.fetchData();
        this.fetchFilterDetails();

        setTimeout(() => {
            // Hiding the spinner after the operation is complete
            this.showSpinner = false;
        }, 2000);

    }
    /*Srikanth Sub-Tab Changes*/

    /*Srikanth Tab Changes*/
    @track tab;
    setSelectedWaiverFromURL() {
        if (window.location.href.includes('All_Waivers')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'All_Waivers';
        }
        else if (window.location.href.includes('ABC')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'ABC';
        }
        else if (window.location.href.includes('Communication')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Communication';
        }
        else if (window.location.href.includes('Application')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Application';
        }
        else if (window.location.href.includes('Business')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Business';
        }
        else if (window.location.href.includes('Data')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Data';
        } 
        else if (window.location.href.includes('Technology')) {
            this.selectedWaiver = 'allwaivers';
            this.tab = 'Technology';
        }
        else {
            this.selectedWaiver = 'mywaivers';
            this.tab = '';
        }
    }
    /*Srikanth Tab Changes*/

    handleSearch(event) {
        window.clearTimeout(this.delayTimeout);
        this.searchKey = event.target.value.toLowerCase() ?? '';
        this.delayTimeout = setTimeout(() => {
            this.isLoading = true;
            this.resetPaginationState();
            this.currentPage = 1;

            /*Lazy Loading*/
            this.rowOffSet = 0;
            this.records = [];
            /*Lazy Loading*/

            this.fetchData();
        }, 300);

    }

    handleReset(event) {
        if (!event.target.value) {
            this.currentPage = 1;
            this.searchKey = '';
            this.resetPaginationState();

            /*Lazy Loading*/
            this.rowOffSet = 0;
            this.records = [];
            /*Lazy Loading*/

            this.fetchData();
        }
    }

    handlePageSize(event) {
        this.currentPageSize = parseInt(event.target.value, 10);
        this.currentPage = 1;
        this.isLoading = true;
        this.fetchData();
    }

    /*handleSort(event) {
        const { fieldName: sortedBy, sortDirection: sortedDirection } = event.detail;
        console.log('sortedDirection==', sortedDirection);
        this.resetPaginationState();
        this.searchKey = '';
        this.sortedDirection = sortedDirection;
        this.sortedBy = sortedBy;
        this.currentPage = 1;
        this.fetchData();
    }*/


    handleSort(event) {
        const { fieldName: sortedBy, sortDirection: sortedDirection } = event.detail;
        console.log('sortedDirection==', sortedDirection);
        this.resetPaginationState();
        this.searchKey = '';
        this.sortedDirection = sortedDirection;
        this.sortedBy = sortedBy;
        this.currentPage = 1;

        /*Lazy Loading*/
        this.rowOffSet = 0;
        this.records = [];
            /*Lazy Loading*/
        this.fetchDataAsync();
    }


    /*handleFirst() {
        this.currentPage = 1;
        this.resetPaginationState();
        this.searchKey = '';
        this.fetchData();
    }

    handleLast() {
        this.currentPage = this.totalPages;
        this.resetPaginationState();
        this.searchKey = '';
        this.first = false;
        this.last = true;
        this.lastPageSize = this.totalRecords % this.currentPageSize;
        this.fetchData();
    }

    handleNext() {
        this.currentPage++;
        const lastRecord = this.records[this.records.length - 1];
        this.after = lastRecord[this.sortedBy] || 'NULL';
        this.before = '';
        this.lastId = lastRecord.Id;
        this.firstId = '';
        this.first = false;
        this.last = (this.currentPage === this.totalPages);
        this.fetchData();
    }

    handlePrevious() {
        this.currentPage--;
        const firstRecord = this.records[0];
        this.before = firstRecord[this.sortedBy] || 'NULL';
        this.after = '';
        this.firstId = firstRecord.Id;
        this.lastId = '';
        this.first = (this.currentPage === 1);
        this.last = false;
        this.fetchData();
    }*/

    resetPaginationState() {
        this.isLoading = true;
        this.before = '';
        this.firstId = '';
        this.after = '';
        this.lastId = '';
        this.first = true;
        this.last = false;
        this.lastPageSize = 0;
        this.sortedBy = 'Waiver_Id__r.Requesting_Portfolio__c';
        this.sortedDirection = 'asc';
    }

    /*Srikanth Pagination Logic*/
    allRecords = [];
    handleFirst() {
        this.currentPage = 1;
        this.updateVisibleRecords();
    }

    handleLast() {
        this.currentPage = this.totalPages;
        this.updateVisibleRecords();
    }

    handleNext() {
        if (this.currentPage < this.totalPages) {
            this.currentPage++;
            this.updateVisibleRecords();
        }
    }

    handlePrevious() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.updateVisibleRecords();
        }
    }

    updateVisibleRecords() {
        // Calculate start and end indices
        const startIndex = (this.currentPage - 1) * this.currentPageSize;
        const endIndex = startIndex + this.currentPageSize;
        // Slice records for the current page
        //this.records = this.allRecords.slice(startIndex, endIndex);
        
        /*Lazy Loading*/
        //this.records = this.allRecords;
        /*Lazy Loading*/

        console.log('startIndex ✅ ', startIndex);
        console.log('endIndex ✅ ', endIndex);
        this.isLoading = false;
        console.log(`Displaying records for page ${this.currentPage}:`, this.records);
    }
    /*Srikanth Pagination Logic*/


    async fetchDataAsync() {
        console.log('this.selectedWaiver in fetchDataAsync 521 ' + this.selectedWaiver);
        getWaiverRecords({
            searchKey: this.searchKey,
            sortBy: this.sortedBy,
            sortOrder: this.sortedDirection,
            pageSize: this.currentPageSize,
            first: this.first,
            after: this.after,
            lastId: this.lastId,
            before: this.before,
            firstId: this.firstId,
            last: this.last,
            lastPageSize: this.lastPageSize,
            allOrMy: this.selectedWaiver,
            filters: JSON.stringify(this.filters),
            tab: this.tab,
            limitSize: this.rowLimit , offset : this.rowOffSet
        }).then((data) => {
            console.log('this.initialRecords length in fetchDataAsync 539 ' + this.initialRecords);


            /*Lazy Loading*/
            if (!data.waiverRecords || data.waiverRecords.length === 0) {
                console.log('No more records to load. 520');
                this.hasMoreData = false;  // Mark that no more records exist
                this.isLoading = false;
                //return;
            }
            /*Lazy Loading*/

            if (this.initialRecords.length === 0) {
                this.initialRecords = data.waiverRecords;
            }
            console.log('data in fetchDataAsync 554 ' + JSON.stringify(data));
            const filteredRecords = data.waiverRecords.filter((record) => {
                return record.Waiver_Id__r;
            });

            const records = data.waiverRecords.map((record) => {

                console.log('this.stageLabelMap 561 '+JSON.stringify(this.stageLabelMap));
                const stageLabel = this.stageLabelMap[record.Waiver_Id__r?.Stage__c] || record.Waiver_Id__r?.Stage__c;
                console.log('stageLabel '+stageLabel);

                // Determining iconName, helpText, and iconClass based on Renew_Counter__c
                let iconName = '';
                let helpText = '';
                let iconClass = '';
                const threshold = record.Waiver_Id__r?.Renew_Counter__c;

                if (record.Waiver_Id__r?.Renew_Counter__c == 2) {
                    iconName = 'utility:warning';
                    helpText = `Renew counter is ${threshold}`;
                    iconClass = 'slds-icon-text-warning';
                } else if (record.Waiver_Id__r?.Renew_Counter__c >= 3) {
                    iconName = 'utility:alert';
                    helpText = `Renew counter is ${threshold} or more`;
                    iconClass = 'slds-icon-text-error';
                }

                let expirationIconName = '';
                let expirationHelpText = '';
                let expirationIconClass = '';

                const expirationDate = new Date(record.Waiver_Id__r?.Waiver_Expiration_Date__c);
                console.log('expirationDate 627 '+expirationDate);
                const today = new Date();
                const timeDifference = expirationDate - today;
                const daysDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
                console.log('daysDifference 631 '+daysDifference);

                if (daysDifference <= 30 && daysDifference > 0) {
                    expirationIconName = 'utility:alert';
                    expirationHelpText = `Expires in ${daysDifference} days`;
                    expirationIconClass = 'slds-icon-text-warning';
                } else if (daysDifference <= 0) {
                    expirationIconName = 'utility:warning';
                    expirationHelpText = `Expired ${Math.abs(daysDifference)} days ago`;
                    expirationIconClass = 'slds-icon-text-error';
                }

                return {
                    ...record,
                    Name: record.Waiver_Id__r?.Name ?? '',
                    Requesting_Portfolio__c: record.Waiver_Id__r?.Requesting_Portfolio__c ?? '',
                    Waiver_Reason__c: record.Waiver_Id__r?.Waiver_Reason__c ?? '',
                    //Status__c: record.Waiver_Id__r?.Status__c ?? '',
                    Standard_Page_Title__c: record.Waiver_Id__r?.Standard_Page_Title__c ?? '',
                    Type__c: record.Waiver_Id__r?.Type__c ?? '',
                    waiverExpirationDate: {
                        Waiver_Expiration_Date__c: record.Waiver_Id__r?.Waiver_Expiration_Date__c ?? '',
                        expirationIconName: expirationIconName,
                        expirationHelpText: expirationHelpText,
                        expirationIconClass: expirationIconClass
                    },
                    renewCounter: {
                        Renew_Counter__c: record.Waiver_Id__r?.Renew_Counter__c ?? '',
                        iconName: iconName,
                        helpText: helpText,
                        iconClass: iconClass
                    },
                    //Stage__c: stageLabel,//record.Waiver_Id__r?.Stage__c ?? '',
                    statusStage: {
                        status: record.Waiver_Id__r?.Status__c ?? '',
                        stage: stageLabel
                    }
                };
            });
            /*this.records = records;
            this.totalRecords = data.waiverRecordsCount;
            this.totalPages = Math.ceil(data.waiverRecordsCount / this.currentPageSize);
            this.isLoading = false;*/

            // Sort records based on the selected field (handling nested fields)
          /*  this.records = [...records].sort((a, b) => {
                let valA = this.getNestedValue(a, this.sortedBy);
                let valB = this.getNestedValue(b, this.sortedBy);
                console.log('Sorted field valA :', valA);
                console.log('Sorted field valB :', valB);
                valA = valA ? valA.toString().toLowerCase() : '';
                valB = valB ? valB.toString().toLowerCase() : '';

                if (valA < valB) {
                    return this.sortedDirection === 'asc' ? -1 : 1;
                } else if (valA > valB) {
                    return this.sortedDirection === 'asc' ? 1 : -1;
                }
                return 0;
            });
            */
            console.log('Mapped Records: 650', this.records.length);
                for (let i = 0; i < this.records.length; i++) {
                console.log('Sorted records:', this.records[i].Waiver_Id__r.Waiver_Reason__c);
                }                       
            console.log('Mapped Records: 650', JSON.stringify(this.records));

            /*Srikanth Pagination Logic*/
            // Handling records regardless of Apex behavior
            if (this.currentPage === 1) {
                // Save all records on the first fetch
                this.allRecords = records;//data.waiverRecords;
                this.totalRecords = data.waiverRecordsCount;
                this.totalPages = Math.ceil(this.totalRecords / this.currentPageSize);
            }
            // Updating visible records for the current page


            /*Lazy Loading*/
            //this.updateVisibleRecords();
            //this.isLoading = false;
            let updatedRecords = [...this.records, ...records];

            // Use a Set to remove duplicates based on the "Id" field
            let uniqueRecords = Array.from(new Set(updatedRecords.map(record => record.Id)))
                .map(id => updatedRecords.find(record => record.Id === id));

            this.records = uniqueRecords;

            //this.records = updatedRecords;
            console.log('this.records lazy loading 615 ' + JSON.stringify(this.records));
            this.totalRecords = data.waiverRecordsCount;
            this.hasMoreData = this.records.length < this.totalRecords;
            //if (!this.hasMoreData) {
                this.isLoading = false;
                this.isLoadingMore = false;
            //}
            console.log('this.hasMoreData 622 ' + this.hasMoreData);
            console.log('this.isLoading 623 ' + this.isLoading);
            /*Lazy Loading*/


            // If there's no data for the current page, reset the page and fetch again
            if (this.records.length === 0 && this.currentPage > 1) {
                this.currentPage--;
                this.fetchDataAsync();
            }
            /*Srikanth Pagination Logic*/

        }).catch((error) => {
            console.error(error);
            this.isLoading = false;
        });
    }

    // Helper function to get nested values
    getNestedValue(record, field) {
        const fields = field.split('.');
        let value = record;
        for (let i = 0; i < fields.length; i++) {
            if (value) {
                value = value[fields[i]];
            } else {
                return undefined;
            }
        }
        return value;
    }

    

    fetchData() {
        console.log('this.selectedWaiver in fetchData 284 ' + this.selectedWaiver);
        console.log('this.rowLimit in fetchData 284 ' + this.rowLimit);
        console.log('this.rowOffSet in fetchData 284 ' + this.rowOffSet);

        console.log('this.filters 690 ' + JSON.stringify(this.filters));

        getWaiverRecords({
            searchKey: this.searchKey,
            sortBy: this.sortedBy,
            sortOrder: this.sortedDirection,
            pageSize: this.currentPageSize,
            first: this.first,
            after: this.after,
            lastId: this.lastId,
            before: this.before,
            firstId: this.firstId,
            last: this.last,
            lastPageSize: this.lastPageSize,
            allOrMy: this.selectedWaiver,
            filters: JSON.stringify(this.filters),
            tab: this.tab,
            limitSize: this.rowLimit , offset : this.rowOffSet
        }).then((data) => {
            console.log('this.initialRecords length in fetchData 300 ' + this.initialRecords);
            console.log('data.waiverRecords 300 ' + JSON.stringify(data.waiverRecords));

            /*Lazy Loading*/
            if (!data.waiverRecords || data.waiverRecords.length === 0) {
                console.log('No more records to load.');
                this.hasMoreData = false;  // Mark that no more records exist
                this.isLoading = false;
                //return;
            }
            /*Lazy Loading*/

            if (this.initialRecords.length === 0) {
                this.initialRecords = data.waiverRecords;
            }
            console.log('data in fetchData 304 ' + JSON.stringify(data));

            const filteredRecords = data.waiverRecords.filter((record) => {
                // Defining the conditions under which records should be included
                return record.Waiver_Id__r; //&& record.Waiver_Id__r.Name && record.Waiver_Id__r.Status__c;
            });

            const records = data.waiverRecords.map((record) => {
                /*return {
                    ...record,
                    Name: record.Waiver_Id__r.Name,
                    Requesting_Portfolio__c: record.Waiver_Id__r.Requesting_Portfolio__c,
                    Waiver_Reason__c: record.Waiver_Id__r.Waiver_Reason__c,
                    Status__c: record.Waiver_Id__r.Status__c,
                    Standard_Page_Title__c: record.Waiver_Id__r.Standard_Page_Title__c,
                };*/

                console.log('this.stageLabelMap 703 '+JSON.stringify(this.stageLabelMap));
                const stageLabel = this.stageLabelMap[record.Waiver_Id__r?.Stage__c] || record.Waiver_Id__r?.Stage__c;
                console.log('stageLabel '+stageLabel);

                // Determining iconName, helpText, and iconClass based on Renew_Counter__c
                let iconName = '';
                let helpText = '';
                let iconClass = '';
                const threshold = record.Waiver_Id__r?.Renew_Counter__c;

                if (record.Waiver_Id__r?.Renew_Counter__c == 2) {
                    iconName = 'utility:warning';
                    helpText = `Renew counter is ${threshold}`;
                    iconClass = 'slds-icon-text-warning';
                } else if (record.Waiver_Id__r?.Renew_Counter__c >= 3) {
                    iconName = 'utility:alert';
                    helpText = `Renew counter is ${threshold} or more`;
                    iconClass = 'slds-icon-text-error';
                }

                let expirationIconName = '';
                let expirationHelpText = '';
                let expirationIconClass = '';

                const expirationDate = new Date(record.Waiver_Id__r?.Waiver_Expiration_Date__c);
                console.log('expirationDate 838 '+expirationDate);
                const today = new Date();
                const timeDifference = expirationDate - today;
                const daysDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
                console.log('daysDifference 842 '+daysDifference);

                if (daysDifference <= 30 && daysDifference > 0) {
                    expirationIconName = 'utility:alert';
                    expirationHelpText = `Expires in ${daysDifference} days`;
                    expirationIconClass = 'slds-icon-text-warning';
                } else if (daysDifference <= 0) {
                    expirationIconName = 'utility:warning';
                    expirationHelpText = `Expired ${Math.abs(daysDifference)} days ago`;
                    expirationIconClass = 'slds-icon-text-error';
                }

                return {
                    ...record,
                    Name: record.Waiver_Id__r?.Name ?? '',
                    Requesting_Portfolio__c: record.Waiver_Id__r?.Requesting_Portfolio__c ?? '',
                    Waiver_Reason__c: record.Waiver_Id__r?.Waiver_Reason__c ?? '',
                    //Status__c: record.Waiver_Id__r?.Status__c ?? '',
                    Standard_Page_Title__c: record.Waiver_Id__r?.Standard_Page_Title__c ?? '',
                    Type__c: record.Waiver_Id__r?.Type__c ?? '',
                    waiverExpirationDate: {
                        Waiver_Expiration_Date__c: record.Waiver_Id__r?.Waiver_Expiration_Date__c ?? '',
                        expirationIconName: expirationIconName,
                        expirationHelpText: expirationHelpText,
                        expirationIconClass: expirationIconClass
                    },
                    renewCounter: {
                        Renew_Counter__c: record.Waiver_Id__r?.Renew_Counter__c ?? '',
                        iconName: iconName,
                        helpText: helpText,
                        iconClass: iconClass
                    },
                    //Stage__c: stageLabel,//record.Waiver_Id__r?.Stage__c ?? '',
                    statusStage: {
                        status: record.Waiver_Id__r?.Status__c ?? '',
                        stage: stageLabel
                    }
                };
            });
            /*this.records = records;
            this.totalRecords = data.waiverRecordsCount;
            this.totalPages = Math.ceil(data.waiverRecordsCount / this.currentPageSize);
            this.isLoading = false;*/

            

            /*Srikanth Pagination Logic*/
            // Handling records regardless of Apex behavior
            if (this.currentPage === 1) {
                // Save all records on the first fetch
                this.allRecords = records;//data.waiverRecords;
                this.totalRecords = data.waiverRecordsCount;
                this.totalPages = Math.ceil(this.totalRecords / this.currentPageSize);
            }
            // Updating visible records for the current page

            /*Lazy Loading*/
            //this.updateVisibleRecords();
            //this.isLoading = false;
            let updatedRecords = [...this.records, ...records];
            this.records = updatedRecords;
            console.log('this.records lazy loading 650 ' + this.records);
            this.totalRecords = data.waiverRecordsCount;
            this.hasMoreData = this.records.length < this.totalRecords;
            //if (!this.hasMoreData) {
                this.isLoading = false;
                this.isLoadingMore = false;
            //}
            console.log('this.hasMoreData 669 ' + this.hasMoreData);
            console.log('this.isLoading 669 ' + this.isLoading);
            /*Lazy Loading*/

            //this.isLoading = false;
            // If there's no data for the current page, reset the page and fetch again
            if (this.records.length === 0 && this.currentPage > 1) {
                this.currentPage--;
                this.fetchData();
            }
            /*Srikanth Pagination Logic*/

            console.log('Mapped Records: 851', JSON.stringify(this.records));

            console.log('this.selectedWaiver 317 ' + this.selectedWaiver);
            // Publish the event with the payload
            const payload = {
                records: this.records,
                totalRecords: this.totalRecords,
                totalPages: this.totalPages,
                isLoading: this.isLoading,
                selectedWaiver: this.selectedWaiver,
                selectedFilter: this.selectedFilter
            };
            pubsub.publish('waiverRecordsFetched', payload);

        }).catch((error) => {
            console.error(error);
            this.isLoading = false;
        });
        this.height= window.innerHeight;
            console.log('height ',this.height);
        window.onresize = checkHeight;
        function checkHeight(){
            this.height= window.innerHeight;
            console.log('height ',this.height);
        }
    }

    /*Lazy Loading*/
    loadMoreData1(event) {
        console.log('scrolling loadMoreData: 678 ', event);
        const currentRecord = this.records;
        const { target } = event;
        //target.isLoading = true;
        this.rowOffSet = this.rowOffSet + this.rowLimit;
        console.log('this.rowOffSet: 684 ', this.rowOffSet);
        this.fetchData();
    }
    /*Lazy Loading*/

    /*Lazy Loading*/
    @track recordsConnected = [];
    fetchData1(applyFilterClick) {
        console.log('this.selectedWaiver in fetchData 284 ' + this.selectedWaiver);
        console.log('this.rowLimit in fetchData 284 ' + this.rowLimit);
        console.log('this.rowOffSet in fetchData 284 ' + this.rowOffSet);

        getWaiverRecords({
            searchKey: this.searchKey,
            sortBy: this.sortedBy,
            sortOrder: this.sortedDirection,
            pageSize: this.currentPageSize,
            first: this.first,
            after: this.after,
            lastId: this.lastId,
            before: this.before,
            firstId: this.firstId,
            last: this.last,
            lastPageSize: this.lastPageSize,
            allOrMy: this.selectedWaiver,
            filters: JSON.stringify(this.filters),
            tab: this.tab,
            limitSize: this.rowLimit , offset : this.rowOffSet
        }).then((data) => {
            console.log('this.initialRecords length in fetchData 300 ' + this.initialRecords);
            console.log('data.waiverRecords 300 ' + JSON.stringify(data.waiverRecords));

            /*Lazy Loading*/
            if (!data.waiverRecords || data.waiverRecords.length === 0) {
                console.log('No more records to load.');
                this.hasMoreData = false;  // Mark that no more records exist
                this.isLoading = false;
                //return;
            }
            /*Lazy Loading*/

            if (this.initialRecords.length === 0) {
                this.initialRecords = data.waiverRecords;
            }
            console.log('data in fetchData 304 ' + JSON.stringify(data));

            const filteredRecords = data.waiverRecords.filter((record) => {
                // Defining the conditions under which records should be included
                return record.Waiver_Id__r; //&& record.Waiver_Id__r.Name && record.Waiver_Id__r.Status__c;
            });

            const records = data.waiverRecords.map((record) => {

                console.log('this.stageLabelMap 703 '+JSON.stringify(this.stageLabelMap));
                const stageLabel = this.stageLabelMap[record.Waiver_Id__r?.Stage__c] || record.Waiver_Id__r?.Stage__c;
                console.log('stageLabel '+stageLabel);

                // Determining iconName, helpText, and iconClass based on Renew_Counter__c
                let iconName = '';
                let helpText = '';
                let iconClass = '';
                const threshold = record.Waiver_Id__r?.Renew_Counter__c;

                if (record.Waiver_Id__r?.Renew_Counter__c == 2) {
                    iconName = 'utility:warning';
                    helpText = `Renew counter is ${threshold}`;
                    iconClass = 'slds-icon-text-warning';
                } else if (record.Waiver_Id__r?.Renew_Counter__c >= 3) {
                    iconName = 'utility:alert';
                    helpText = `Renew counter is ${threshold} or more`;
                    iconClass = 'slds-icon-text-error';
                }

                let expirationIconName = '';
                let expirationHelpText = '';
                let expirationIconClass = '';

                const expirationDate = new Date(record.Waiver_Id__r?.Waiver_Expiration_Date__c);
                console.log('expirationDate 1026 '+expirationDate);
                const today = new Date();
                const timeDifference = expirationDate - today;
                const daysDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
                console.log('daysDifference 1030 '+daysDifference);

                if (daysDifference <= 30 && daysDifference > 0) {
                    expirationIconName = 'utility:alert';
                    expirationHelpText = `Expires in ${daysDifference} days`;
                    expirationIconClass = 'slds-icon-text-warning';
                } else if (daysDifference <= 0) {
                    expirationIconName = 'utility:warning';
                    expirationHelpText = `Expired ${Math.abs(daysDifference)} days ago`;
                    expirationIconClass = 'slds-icon-text-error';
                }

                return {
                    ...record,
                    Name: record.Waiver_Id__r?.Name ?? '',
                    Requesting_Portfolio__c: record.Waiver_Id__r?.Requesting_Portfolio__c ?? '',
                    Waiver_Reason__c: record.Waiver_Id__r?.Waiver_Reason__c ?? '',
                    Status__c: record.Waiver_Id__r?.Status__c ?? '',
                    Standard_Page_Title__c: record.Waiver_Id__r?.Standard_Page_Title__c ?? '',
                    Type__c: record.Waiver_Id__r?.Type__c ?? '',
                    waiverExpirationDate: {
                        Waiver_Expiration_Date__c: record.Waiver_Id__r?.Waiver_Expiration_Date__c ?? '',
                        expirationIconName: expirationIconName,
                        expirationHelpText: expirationHelpText,
                        expirationIconClass: expirationIconClass
                    },
                    renewCounter: {
                        Renew_Counter__c: record.Waiver_Id__r?.Renew_Counter__c ?? '',
                        iconName: iconName,
                        helpText: helpText,
                        iconClass: iconClass
                    },
                    Stage__c: stageLabel,//record.Waiver_Id__r?.Stage__c ?? '',
                    statusStage: {
                        status: record.Waiver_Id__r?.Status__c ?? '',
                        stage: stageLabel
                    }
                };
            });

            

            /*Srikanth Pagination Logic*/
            // Handling records regardless of Apex behavior
            if (this.currentPage === 1) {
                // Save all records on the first fetch
                this.allRecords = records;//data.waiverRecords;
                this.totalRecords = data.waiverRecordsCount;
                this.totalPages = Math.ceil(this.totalRecords / this.currentPageSize);
            }
            // Updating visible records for the current page

            /*Lazy Loading*/
            //this.updateVisibleRecords();
            //this.isLoading = false;
            let updatedRecords = [...this.records, ...records];
            this.records = updatedRecords;
            if (applyFilterClick == 'connectedCall') {
                this.recordsConnected = this.records;
            }
            console.log('this.recordsConnected in fetchData1 838 ' + this.recordsConnected);
            console.log('this.records lazy loading 839 ' + this.records);
            this.totalRecords = data.waiverRecordsCount;
            this.hasMoreData = this.records.length < this.totalRecords;
            //if (!this.hasMoreData) {
                this.isLoading = false;
                this.isLoadingMore = false;
            //}
            console.log('this.hasMoreData 669 ' + this.hasMoreData);
            console.log('this.isLoading 669 ' + this.isLoading);
            /*Lazy Loading*/

            //this.isLoading = false;
            // If there's no data for the current page, reset the page and fetch again
            if (this.records.length === 0 && this.currentPage > 1) {
                this.currentPage--;
                this.fetchData();
            }
            /*Srikanth Pagination Logic*/

            console.log('Mapped Records: 1010', JSON.stringify(this.records));

            console.log('this.selectedWaiver 317 ' + this.selectedWaiver);
            // Publish the event with the payload
            const payload = {
                records: this.records,
                totalRecords: this.totalRecords,
                totalPages: this.totalPages,
                isLoading: this.isLoading,
                selectedWaiver: this.selectedWaiver,
                selectedFilter: this.selectedFilter
            };
            pubsub.publish('waiverRecordsFetched', payload);

        }).catch((error) => {
            console.error(error);
            this.isLoading = false;
        });
    }
    /*Lazy Loading*/

    fetchFilterDetails() {
        getFilterDetails({tabName: this.tab}).then(result => {
            console.log('result 471 check ' + JSON.stringify(result));
            if (result) {
                console.log('result 471 check filterOptions ' + JSON.stringify(result.filterOptions));
                console.log('result 471 check portfolioOptions ' + JSON.stringify(result.portfolioOptions));
                const filterOptions = result.filterOptions;
                this._filterOptions = filterOptions;
                this.template.querySelector('[role="cm-picklist"]').setOptions(this._filterOptions);
                this.template.querySelector('[role="cm-picklist"]').setSelectedList(this.selectedFilter);
                console.log('result 552 this.selectedFilter ' + JSON.stringify(this.selectedFilter));
                if (this.selectedFilter.length) {
                    const evt = {
                        detail: {
                            selectedValues: this.selectedFilter
                        }
                    };
                    console.log('result 559 evt ' + JSON.stringify(evt));

                    this.handleFilterBy('selectedValues', evt);
                }
            }
        }).catch(error => {
            console.error(error);
        });
    }

    /*Srikanth Changes*/
    /*fetchFilterDetails() {
        getFilterDetails().then(result => {
            console.log('result 491 '+JSON.stringify(result));
            if (result && result.filterOptions) {
                // Map filter options and their sub-options (domains)
                const filterOptions = result.filterOptions.map(filter => {
                    return {
                        label: filter.label,    // The label of the filter option
                        value: filter.value,    // The value of the filter option
                        subOptions: filter.domains.map(domain => ({
                            label: domain.label,   // The label of the sub-option
                            value: domain.value    // The value of the sub-option
                        }))
                    };
                });

                this._filterOptions = filterOptions;
                this.template.querySelector('[role="cm-picklist"]').setOptions(this._filterOptions);
                this.template.querySelector('[role="cm-picklist"]').setSelectedList(this.selectedFilter);

                if (this.selectedFilter.length) {
                    const evt = {
                        detail: { selectedValues: this.selectedFilter }
                    };
                    this.handleFilterBy('selectedValues', evt);
                }
            }
        }).catch(error => {
            console.error(error);
        });
    }*/
    /*Srikanth Changes*/



    /*@track parentOptions = [
        {
            value: 'parent1',
            label: 'Parent 1',
            options: [
                {
                    value: 'option1',
                    label: 'Option 1',
                    checked: false,
                    subOptions: [
                        { value: 'subOption1', label: 'Sub-Option 1.1', checked: false },
                        { value: 'subOption2', label: 'Sub-Option 1.2', checked: false }
                    ]
                },
                {
                    value: 'option2',
                    label: 'Option 2',
                    checked: false,
                    subOptions: [
                        { value: 'subOption3', label: 'Sub-Option 2.1', checked: false },
                        { value: 'subOption4', label: 'Sub-Option 2.2', checked: false }
                    ]
                }
            ]
        },
        {
            value: 'parent2',
            label: 'Parent 2',
            options: [
                {
                    value: 'optionA',
                    label: 'Option A',
                    checked: false,
                    subOptions: [
                        { value: 'subOptionA1', label: 'Sub-Option A.1', checked: false },
                        { value: 'subOptionA2', label: 'Sub-Option A.2', checked: false }
                    ]
                },
                {
                    value: 'optionB',
                    label: 'Option B',
                    checked: false,
                    subOptions: [
                        { value: 'subOptionB1', label: 'Sub-Option B.1', checked: false },
                        { value: 'subOptionB2', label: 'Sub-Option B.2', checked: false }
                    ]
                }
            ]
        }
    ];

    handleOptionChange(event) {
        const parentValue = event.target.dataset.parent;
        const optionValue = event.target.dataset.value;
        const isChecked = event.target.checked;

        const parentOption = this.parentOptions.find((parent) => parent.value === parentValue);
        if (parentOption) {
            const option = parentOption.options.find((opt) => opt.value === optionValue);
            if (option) {
                option.checked = isChecked;

                // Optionally, toggle sub-options when the parent option changes
                if (option.subOptions) {
                    option.subOptions.forEach((subOption) => {
                        subOption.checked = isChecked;
                    });
                }
            }
        }
    }

    handleSubOptionChange(event) {
        const parentValue = event.target.dataset.parent;
        const optionValue = event.target.dataset.option;
        const subValue = event.target.dataset.subValue;
        const isChecked = event.target.checked;

        const parentOption = this.parentOptions.find((parent) => parent.value === parentValue);
        if (parentOption) {
            const option = parentOption.options.find((opt) => opt.value === optionValue);
            if (option && option.subOptions) {
                const subOption = option.subOptions.find((sub) => sub.value === subValue);
                if (subOption) {
                    subOption.checked = isChecked;
                }
            }
        }
    }*/

    //Action Buttons
    handleActions(event) {
        const actionName = event.target.dataset.action ? event.target.dataset.action : (event.detail.action.name ? event.detail.action.name : '');
        
        /*Srikanth Changes*/
        console.log('event 606 '+JSON.stringify(event))
        const actionName1 = event.target.dataset.action || (event.detail?.action?.name || '');
        console.log('Action Name:', actionName1);

        const filterValue = event.target.value; // Value of the checkbox
        const isChecked = event.target.checked; // Checked state of the checkbox
        // Extract index (ensure it's treated as a string if needed)
        const index = event.target.dataset.index;
        console.log('Filter Value:', filterValue);
        console.log('Is Checked:', isChecked);
        console.log('Index:', index);
        /*Srikanth Changes*/

        this.rowOffSet = 0;
        console.log('this.records 650 ' + this.records);
        console.log('this.recordsConnected 650 ' + this.recordsConnected);
        this.records = this.recordsConnected;
        
        if (actionName) {
            switch (actionName) {
                case 'view':
                    console.log('record clicked 27');
                    this.handleView(event, actionName);
                    break;
                case 'close':
                    this.handleView(event, actionName);
                    break;
                case 'applyfilter':
                    console.log('apply filter 615'+actionName);
                    this.handleFilterBy(actionName);
                    break;
                case 'resetfilter':
                    this.handleFilterBy(actionName);
                    break;
                case 'selectedValues':
                    this.handleFilterBy(actionName, event);
                    break;
                case 'selectedfiltervalue':
                    /*Srikanth Changes*/
                    console.log('selectedfiltervalue 625'+actionName);
                    const selectedValue = event.target.value;
                    console.log('selectedValue 627'+selectedValue);
                    console.log('event 627'+JSON.stringify(event));
                    /*Srikanth Changes*/

                    //this.handleFilterBy(actionName, event);
                    
                    /*Srikanth Changes*/
                    this.handleFilterBy(actionName, event, filterValue, isChecked, index);
                    /*Srikanth Changes*/
                    break;
                case 'filterbyexpand':
                
                    /*Lazy Loading*/
                    this.rowOffSet = 0;
                    //this.records = []; Changed on Feb 13th
                    /*Lazy Loading*/

                    this.handleFilterBy(actionName, event);
                    break;
                case 'sharefilter':
                    this.generateFilterLink();
                    this.showShareLinkModal = true;
                    break;
                case 'showfiltertoggle':
                    this.showFilter = !this.showFilter;
                    if (this.showFilter) {
                        this.showFilter = true;
                        if (this.showRecord) {
                            this._recordViewSize = '7';
                            this._tableSize = '2';
                            this.recordViewStyle = 'width: 62.5%;background-color: white;';
                            this.blueStyle = 'width:0.5%;padding-block: 68vh; background-color: #b0c4de';
                            //this._leftNavSize = '2';
                        } else {
                            this._recordViewSize = '10';
                            this._tableSize = '10';
                            this.recordViewStyle = 'width: 18.8%;background-color: white;';
                            this.tableStyle = 'width: 72.8%;padding-left: 10px;background-color: #b0c4de;overflow-y: auto;';//flex-grow: 1;display: flex;flex-direction: column;padding-left: 10px;overflow-y: auto;background-color: #b0c4de;
                        }
                        this.setOptions();
                    } else {
                        this.showFilter = false;
                        if (this.showRecord) {
                            this._recordViewSize = '9';
                            this._tableSize = '2';
                            this.tableStyle = 'width: 18.8%;padding-left: 10px;background-color: #b0c4de;overflow-y: auto;';//flex-grow: 1;display: flex;flex-direction: column;padding-left: 10px;overflow-y: auto;background-color: #b0c4de;
                            this.recordViewStyle = 'width: 72.8%;background-color: white;';
                        } else {
                            this._recordViewSize = '10';
                            this._tableSize = '12';
                            this.tableStyle = 'width: 100%;padding-left: 10px;background-color: #b0c4de;overflow-y: auto;';//flex-grow: 1;display: flex;flex-direction: column;padding-left: 10px;overflow-y: auto;background-color: #b0c4de;
                        }
                    }
                    break;
                case 'newrecord':
                    this.showNewRecordModal = true;
                    //this.isLoading = true;
                    break;
                default:
                    break;
            }
        }
    }

    handleWaiverChange(event) {
        this.currentPage = 1;
        this.searchKey = '';
        this.resetPaginationState();
        this.selectedWaiver = event.detail.value;
        console.log('this.selectedWaiver 421 ' + this.selectedWaiver);
        this.loading = true;
        this.fetchData();
    }

    handleFilter(filterAction) {
        if (this.showFilterToggle && filterAction === 'apply') {
            this.showRecord = (this.showRecord ? true : false);
            this.showFilter = false;
            // this.showFilterToggle = true;
            // this.showFilterToggleClicked = false;
            this._tableSize = '2';
            this.columns = [...COLUMNS.slice(0, 1)];
        } else {
            this.showRecord = false;
            this.showFilter = true;
            // this.showFilterToggle = true;
            // this.showFilterToggleClicked = false;
            this._tableSize = '9';
            this.tableStyle = 'width: 82.8%;padding-left: 10px;background-color: #b0c4de;overflow-y: auto;';//flex-grow: 1;display: flex;flex-direction: column;padding-left: 10px;overflow-y: auto;background-color: #b0c4de;
            this.columns = [...COLUMNS];
        }

    }
    //Srikant Changes for Refresh Issue
     handleOnLoadView(recordid, actionName) {
        getOnLoadRecordData({ recordId: recordid}).then((data) => {
                        const waiverdata = data;
                        this.recordName=waiverdata.Name;
			            console.log('waiverdata ', waiverdata.Name);

                    }).catch((error) => {
                        console.error(error);
                       
                    });
        this.showRecord = (actionName === 'view' ? true : false);
        if (this.showRecord) {
            this.showFilter = false;
            this.recordId = recordid;

            this.selectedRecordName =this.recordName;
            this.columns = [...COLUMNS.slice(0, 1)];
            this._tableSize = '2';
            this._recordViewSize = '10';
            this.tableStyle = 'width: 18.8%;padding-left: 10px;background-color: #b0c4de;overflow-y: auto;';//flex-grow: 1;display: flex;flex-direction: column;padding-left: 10px;overflow-y: auto;background-color: #b0c4de;
            this.recordViewStyle = 'width: 80%;background-color: white;'; //Srikanth Changed width of view page to fit UI width

            this.editClick = false;

            /*Event Fire*/
            console.log('record clicked 445');
            const payload = {
                recordId: this.recordId,
                objectApiName: 'AWP_Architecture_Waiver_Form__c',
                fieldSet: 'CompactPanelFieldSet',
                editClick: this.editClick
            };
            pubsub.publish('navigate', payload);
            console.log('Event published with payload:', JSON.stringify(payload));
            /*Event Fire*/


            pubsub.publish('editClickViewOnly', { recordId: this.recordId, isEditing: false });
           }
        }
    //Srikant Changes for Refresh Issue
    handleView(event, actionName) {
        this.showRecord = (actionName === 'view' ? true : false);
        if (this.showRecord) {
            this.showFilter = false;
            this.recordId = event.detail.row.Id;

            /*Srikanth Open Url Changes*/
             let windowUrl = new URL(window.location.href);
             console.log('windowUrl View ',windowUrl);
             console.log('this.windowUrl ',this.windowUrl.href); 
            const baseUrl = window.location.origin;
            let changeurl=this.windowUrl.href.toString();
            let finalUrl=this.windowUrl.href.toString();
            if(this.windowUrl.href.includes('a1dHo')){
                changeurl=changeurl.slice(0, changeurl.lastIndexOf("/"));
                finalUrl=`${changeurl}/${this.recordId}`;
                
            }else{
                finalUrl =`${changeurl}/w/${this.recordId}`;
            }
            const newUrl = finalUrl;
            window.history.pushState({}, '', newUrl);
            /*Srikanth Open Url Changes*/
            //location.reload();
            this.selectedRecordName = event.detail.row.Name;
            this.columns = [...COLUMNS.slice(0, 1)];
            this._tableSize = '2';
            this._recordViewSize = '10';
            this.tableStyle = 'width: 18.8%;padding-left: 10px;background-color: #b0c4de;overflow-y: auto;';//flex-grow: 1;display: flex;flex-direction: column;padding-left: 10px;overflow-y: auto;background-color: #b0c4de;
            this.recordViewStyle = 'width: 80%;background-color: white;'; //Srikanth Changed width of view page to fit UI width

            this.editClick = false;
            //Srikant 17 April
            getRelationship({ recordId: this.recordId}).then((data) => {
                        const reldata = data;
                        this.relationShipId=reldata.Id;
			            console.log('relationShipId ', this.relationShipId);

                    }).catch((error) => {
                        console.error(error);
                       
                    });
              //Srikant 17 April
            /*Event Fire*/
            console.log('record clicked 445');
            const payload = {
                recordId: this.recordId,
                objectApiName: 'AWP_Architecture_Waiver_Form__c',
                fieldSet: 'CompactPanelFieldSet',
                editClick: this.editClick
            };
            pubsub.publish('navigate', payload);
            console.log('Event published with payload:', JSON.stringify(payload));
            /*Event Fire*/


            pubsub.publish('editClickViewOnly', { recordId: this.recordId, isEditing: false });

            //pubsub.publish('saveSuccessEditEnable', { recordId: this.recordId, isDisabling: true });
            const keyValue = window.location.pathname;
            const urlParm = new URLSearchParams(keyValue);
            console.log('keyValue ',keyValue);
            //const parm = urlParm.get()

        } else {
            this.showFilter = true;
            this._tableSize = '9';
            this.tableStyle = 'width: 82.8%;padding-left: 10px;background-color: #b0c4de;overflow-y: auto;';//flex-grow: 1;display: flex;flex-direction: column;padding-left: 10px;overflow-y: auto;background-color: #b0c4de;
            this.recordViewStyle = 'background-color: white;';
            this.columns = [...COLUMNS];
            this.setOptions();

            this.editClick = false;

            /*Srikanth Open Url Changes*/
            const url = this.windowUrl;
            window.history.pushState({}, '', url.toString());
            /*Srikanth Open Url Changes*/

            /*Event Fire*/
            console.log('record clicked 464');
            const payload = {
                recordId: '',
                objectApiName: 'AWP_Architecture_Waiver_Form__c',
                fieldSet: 'CompactPanelFieldSet',
                editClick: this.editClick
            };
            pubsub.publish('navigate', payload);
            console.log('Event published with payload close:', JSON.stringify(payload));
            /*Event Fire*/
        }
    }


    handleCloseNavigate(event){
        console.log('clickedCloseButton event fired 1004'+JSON.stringify(event));
        this.showRecord = false;
        this.showFilter = true;
        this._tableSize = '9';
        this.tableStyle = 'width: 82.8%;padding-left: 10px;background-color: #b0c4de;overflow-y: auto;';//flex-grow: 1;display: flex;flex-direction: column;padding-left: 10px;overflow-y: auto;background-color: #b0c4de;
        this.recordViewStyle = 'background-color: white;';
        this.columns = [...COLUMNS];
        this.setOptions();

        this.editClick = false;

        /*Srikanth Open Url Changes*/
        const url = this.windowUrl;
        window.history.pushState({}, '', url.toString());
        /*Srikanth Open Url Changes*/

        /*Event Fire*/
        console.log('record clicked 464');
        const payload = {
            recordId: '',
            objectApiName: 'AWP_Architecture_Waiver_Form__c',
            fieldSet: 'CompactPanelFieldSet',
            editClick: this.editClick
        };
        pubsub.publish('navigate', payload);
        console.log('Event published with payload close:', JSON.stringify(payload));

        /*Lazy Loading*/
        this.rowOffSet = 0;
        this.records = [];            
        this.fetchDataAsync();
        /*Lazy Loading*/
    }

    /*Srikanth Changes*/
    /*portfolioDomains;
    fetchRelatedDomains(portfolioValueSelected) {
        const rece = portfolioValueSelected;
        // Fetch related domains for all selected portfolios
        getFilterDetailsSelected({ portfolio: portfolioValueSelected })
            .then((result) => {
                console.log('Domains for portfolios: ', result);
                const portfolioDomainMap = result.PortfolioDomains;
                console.log('portfolioDomainMap: ', JSON.stringify(portfolioDomainMap));
                if (portfolioDomainMap) {
                    portfolioValueSelected.forEach((selectedPortfolioValue) => {
                        const matchingPortfolio = this._filteredFieldValues.find(
                            (field) => field.filterField === 'Affected Standard Portfolio'
                        );

                        if (matchingPortfolio) {
                            console.log('inside matchingPortfolio : ');
                            const subOptions = portfolioDomainMap[selectedPortfolioValue]?.map((domain) => ({
                                id: domain.id,
                                label: domain.name,
                            })) || [];

                            console.log('subOptions : ' + JSON.stringify(subOptions));

                            // Update the filteredFieldValue with subOptions
                            matchingPortfolio.filteredFieldValue = matchingPortfolio.filteredFieldValue.map((option) => {
                                console.log('selectedPortfolioValue check ' + selectedPortfolioValue);
                                console.log('option.id check ' + option.id);
                                console.log('option.value check ' + option.value);
                                if (option.id === selectedPortfolioValue) {
                                    return {
                                        ...option,
                                        subOptions: subOptions.map(subOption => ({
                                            label: subOption.label,
                                            value: subOption.id,
                                            checked: false,
                                        }))
                                    };
                                }
                                //return option;
                                
                                return {
                                    ...option,
                                    subOptions: option.subOptions || [] // Ensure subOptions always exists
                                };


                            });
                            console.log('matchingPortfolio.filteredFieldValue after update: ' + JSON.stringify(matchingPortfolio.filteredFieldValue));
                            // Trigger reactivity by assigning a new array to _filteredFieldValues
                            this._filteredFieldValues = [...this._filteredFieldValues];
                            console.log('this._filteredFieldValues after: ' + JSON.stringify(this._filteredFieldValues));

                        } else {
                            console.warn(
                                `No matching filter field found for portfolio: ${selectedPortfolioValue}`
                            );
                        }
                    });
                }

            })
            .catch((error) => {
                console.error('Error fetching sub-options:', error);
            });
    }*/

    /*Srikanth Changes*/

    handleFilterBy(actionName, event, filterValue1, isChecked, index1) {
        //console.log('event detail value '+JSON.stringify(event.detail.value));
        let filterValue = event ? event?.detail?.value : null;
        //console.log('filterValue '+JSON.stringify(filterValue));
        const index = event?.target?.dataset ? parseInt(event.target.dataset.index, 10) : null;
        //console.log('index '+index);

        /*Srikanth Changes*/
        let filterValue11 = filterValue1;
        console.log('filterValue11 '+JSON.stringify(filterValue11));
        const index11 = index1;
        console.log('index11 '+index11);
        console.log('isChecked '+isChecked);
        /*Srikanth Changes*/
        


        switch (actionName) {
            case 'applyfilter':
                console.log('applyfilter');
                this.handleFilter('apply');
                console.log('this._filteredFieldValues '+JSON.stringify(this._filteredFieldValues));
                this.filters = this._filteredFieldValues.map(x => {
                    return {
                        [x.filterFieldApiName]: x.selectedValue,
                        uniqueKey: `${x.id}-${x.selectedValue}`
                    }
                });
                this.records = [];
                console.log('this.filters 1453 '+JSON.stringify(this.filters));
                this.fetchData();
                break;
            case 'resetfilter':
                this.isLoading = true;
                this.filterBy = [];
                this._filteredFieldValues = [];
                this.selectedFilter = '';
                this.showFilter = false;
                this.searchKey = '';
                this.handleFilter('reset');
                console.log('reset filter');
                this.filters = [];
                this.records = [];
                this.fetchData();
                this.setOptions();
                break;
            case 'selectedfiltervalue':
                console.log('selectedfiltervalue');
                this._filteredFieldValues.filter(x => x.id === index)[0].selectedValue = filterValue11;//filterValue;


                /*Srikanth Changes*/
                console.log('selectedfiltervalue 740 ' + filterValue);
                const selectedFilter = this._filteredFieldValues.filter(x => x.id === index)[0];
                selectedFilter.selectedValue = Array.isArray(filterValue) ? filterValue : [filterValue];
                console.log('Selected Values:', JSON.stringify(selectedFilter.selectedValue));
                const normalizedFilterValues = selectedFilter.selectedValue.map(value => value?.trim()?.toLowerCase());
                console.log('Normalized Filter Values:', JSON.stringify(normalizedFilterValues));
                const selectedFilterIds = selectedFilter.filteredFieldValue
                    .filter(item => normalizedFilterValues.includes(item.value?.trim()?.toLowerCase()))
                    .map(item => item.id);
                console.log('Selected Filter IDs:', JSON.stringify(selectedFilterIds));
                // If the selected filter value is Affected Standard Portfolio
                /*if (filterValue) {
                    this.fetchRelatedDomains(filterValue);
                }*/
                //if (selectedFilterIds) {
                if (selectedFilterIds && Array.isArray(selectedFilterIds) && this.selectedFilter && this.selectedFilter.includes('Affected Standard')) {/*Feb 15th Changes*/
                    //this.fetchRelatedDomains(selectedFilterIds);
                }
                else{
                    //this._filteredFieldValues.filter(x => x.id === index)[0].selectedValue = filterValue11;//filterValue;
                    const filterField = this._filteredFieldValues.filter(x => x.id === index)[0];
                    if (!filterField) {
                        console.error(`No filter field found for index: ${index11}`);
                        //return;
                    }
                    // Update the selected values array
                    if (isChecked) {
                        // Add the value to the selected values array if it's not already present
                        const targetFilter = this._filteredFieldValues.filter(x => x.id === index)[0];
                        console.log('targetFilter906 ', JSON.stringify(targetFilter));
                        if (targetFilter) {
                            targetFilter.selectedValue.push(filterValue1);
                        }
                        console.log('Updated selected values:906 ', JSON.stringify(targetFilter.selectedValue));
                    } else {
                        // Remove the value from the selected values array
                        const targetFilter = this._filteredFieldValues.filter(x => x.id === index)[0];
                        if (targetFilter) {
                            targetFilter.selectedValue = targetFilter.selectedValue.filter(
                                (selectedValue) => selectedValue !== filterValue1
                            );
                        }
                    }
                    console.log('Updated selected values:', filterField.selectedValues);
                    console.log('this._filteredFieldValues 880 ', JSON.stringify(this._filteredFieldValues));
                }
                /*Srikanth Changes*/

                // Publish the event with the payload
                const payload1 = {
                    _filteredFieldValues: this._filteredFieldValues,
                    totalRecords: this.totalRecords,
                    totalPages: this.totalPages,
                    isLoadingFilter: this.isLoadingFilter,
                    selectedWaiver: this.selectedWaiver,
                    selectedFilter: this.selectedFilter
                };
                pubsub.publish('filterBy', payload1);

                break;
            case 'filterbyexpand':
                console.log('filterbyexpand');
                this._filteredFieldValues.filter(x => x.id === index)[0].showValues = !this._filteredFieldValues.filter(x => x.id === index)[0].showValues;
                this._filteredFieldValues.filter(x => x.id === index)[0].icon = (this._filteredFieldValues.filter(x => x.id === index)[0].showValues) ? 'utility:chevronup' : 'utility:chevrondown';

                // Publish the event with the payload
                const payload2 = {
                    _filteredFieldValues: this._filteredFieldValues,
                    totalRecords: this.totalRecords,
                    totalPages: this.totalPages,
                    isLoadingFilter: this.isLoadingFilter,
                    selectedWaiver: this.selectedWaiver,
                    selectedFilter: this.selectedFilter
                };
                pubsub.publish('filterBy', payload2);

                break;
            case 'selectedValues':
                filterValue = event.detail.selectedValues;
                if (filterValue.length) {
                    this.selectedFilter = filterValue;
                    const selectedFilter = (filterValue.split(';'));
                    console.log('selectedFilter 710 ' + selectedFilter);
                    // this.showFilter = (this.showFilterToggleClicked) ? false : true;
                    this.showFilter = true;
                    this.isLoadingFilter = true;
                    getUniqueValues({ fieldApiName: selectedFilter, allOrMy: this.selectedWaiver }).then((data) => {
                        const values = (data) ? Object.keys(data).map(x => {
                            if (x !== 'PortfolioDomains') {
                                return {
                                    [x]: data[x].map((val) => {
                                        //return { label: (val.value + ' (' + val.count + ')'), value: val.value };
                                        const label = val.value ? val.value : 'No Data';
                                        const value = val.value ? val.value : 'nullcheck';
                                        const id = val.id ? val.id : 'nullcheck';
                                        return { label: `${label} (${val.count})`, value: value, id: id };
                                    })
                                }
                            }
                        }).filter(Boolean) : [];//
                        /*let filteredFieldValues = values.map((x, ind) => {
                            return {
                                id: ind,
                                filterField: (this._filterOptions.filter(t => t.value === Object.keys(x)[0])[0].label),
                                filterFieldApiName: Object.keys(x)[0],
                                filteredFieldValue: Object.values(x)[0].sort((a, b) => (a.value || '').localeCompare(b.value || '')),
                                showValues: false,
                                selectedValue: [],
                                icon: 'utility:add'
                            }
                        });*/

                        /*Srikanth Changes*/
                        console.log('Processed Values:', values);
                        let filteredFieldValues = values.map((x, ind) => {
                            return {
                                id: ind,
                                filterField: (this._filterOptions.filter(t => t.value === Object.keys(x)[0])[0].label),
                                filterFieldApiName: Object.keys(x)[0],
                                filteredFieldValue: Object.values(x)[0]
                                    .sort((a, b) => {
                                        const valueA = (a.value || '').trim().toLowerCase();
                                        const valueB = (b.value || '').trim().toLowerCase();
                                        if (valueA === 'nullcheck') return -1;
                                        if (valueB === 'nullcheck') return 1;
                                        return valueA.localeCompare(valueB); // Alphabetical for others
                                    }),
                                showValues: false,
                                selectedValue: [],
                                icon: 'utility:chevrondown'
                            };
                        });
                        console.log('Filtered Field Values (sorted by value):', JSON.stringify(filteredFieldValues));
                        /*Srikanth Changes*/

                        this._filteredFieldValues = [...filteredFieldValues];
                        this.isLoadingFilter = false;



                        /*Srikanth Port & Domain Changes*/
                        // Process portfolio and domain data
                        console.log('data.PortfolioDomains:', data.PortfolioDomains);
                        const portfolioDomains = data.PortfolioDomains || {};
                        const portfolioDomainList = Object.keys(portfolioDomains).map((portfolioId) => {
                            return {
                                portfolioId: portfolioId,
                                domains: portfolioDomains[portfolioId].map((domain) => ({
                                    id: domain.id,
                                    name: domain.name
                                }))
                            };
                        });

                        console.log('Portfolio and Domain Data:', JSON.stringify(portfolioDomainList));

                        // Update LWC data
                        //this._filteredFieldValues = [...values];
                        //this.isLoadingFilter = false;
                        this.portfolioDomains = portfolioDomainList;
                        console.log('this.portfolioDomains:', JSON.stringify(this.portfolioDomains));

                        this._filteredFieldValues = [...filteredFieldValues];
                        this.isLoadingFilter = false;
                        /*Srikanth Port & Domain Changes*/


                        // Publish the event with the payload
                        const payload3 = {
                            _filteredFieldValues: this._filteredFieldValues,
                            totalRecords: this.totalRecords,
                            totalPages: this.totalPages,
                            isLoadingFilter: this.isLoadingFilter,
                            selectedWaiver: this.selectedWaiver,
                            selectedFilter: this.selectedFilter
                        };
                        console.log('payload check at 584 ' + JSON.stringify(payload3));
                        pubsub.publish('filterBy', payload3);

                    }).catch((error) => {
                        console.error(error);
                        this.isLoadingFilter = false;
                    });
                } else {
                    this.selectedFilter = '';
                }

                break;
            default:
                break;
        }
    }
    setOptions() {
        setTimeout(() => {
            this.template.querySelector('[role="cm-picklist"]').setOptions(this._filterOptions);
            this.template.querySelector('[role="cm-picklist"]').setSelectedList(this.selectedFilter);
        }, 0);
    }

    generateFilterLink() {
        const baseUrl = window.location.origin;
        const generatedUrl = baseUrl + '/lightning/n/Waiver_Records_List_View?c__all=' + (this.selectedWaiver === 'allwaivers' ? true : false) + (this.selectedFilter ? '&c__filterValues=' + this.selectedFilter : '')
        console.log('generateFilterLink=== ' + generatedUrl);
        this.generatedFilterLink = generatedUrl;
    }

    // eslint-disable-next-line consistent-return
    handleCopy() {
        if (
            navigator.clipboard &&
            window.isSecureContext
        ) {
            return navigator.clipboard.writeText(
                this.generatedFilterLink
            );
        }
        return null;
    }

    closeModal(event) {
        if (this.showShareLinkModal) {
            this.showShareLinkModal = false;
        }

        if (this.showNewRecordModal) {
            const newRecordId = event?.detail?.recordId;
            const newRecordName = event?.detail?.recordName;
            if (newRecordId) {
                const evt = {
                    detail: {
                        row: {
                            Id: newRecordId,
                            Name: newRecordName
                        }
                    }
                }
                this.handleView(evt, 'view');
            }
            this.showNewRecordModal = false;
        }
    }


    @track isLoadingMore = false;
    



}
