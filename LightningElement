import { LightningElement, api, wire, track } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import getRecordWithFieldSet from '@salesforce/apex/TechnologyDecision_DataTableHandler.getRecordWithFieldSet';
import { getRelatedListRecords } from 'lightning/uiRelatedListApi';
import { NavigationMixin } from 'lightning/navigation'; // ✅ required import
import { refreshApex } from '@salesforce/apex';
const FIELDS = ['TechnologyDecision__c.Status__c','TechnologyDecision__c.Name'];

export default class TechnologyDecisionHighlightPanel extends NavigationMixin(LightningElement) {
    @api recordId;
    @api objectApiName;
    fieldSet='DecisionField';
   
    @api get recordName() {
         console.log('this._name 14 ',this._name);
        return this._name;
    }
    /*set recordName(value) {
        if (value) {
            this._name = value;
        }
    }*/
    _name = '';
    fieldList = [];
    objectLabelName = '';
    intervalId;
    showEditRecordModal = false;

    // For Dispatching custom event to notify the parent component
    @api editClick;

    
  // @wire(getRelatedListRecords, {
  //   parentRecordId: '$recordId',
  //   // ⚠️ Use the CHILD RELATIONSHIP API NAME (not the object API name)
  //   relatedListId: 'Technology_Decisions__r',
  //   fields: ['TechnologyDecision__c.Id', 'TechnologyDecision__c.Name']
  // })
  // wiredRelatedList(result) {
  //   this.relListWireResult = result; // save to refresh later
  //   const { data, error } = result;
  //   if (data) {
  //     this.childRecords = data.records;
  //     this.error = undefined;
  //   } else if (error) {
  //     this.childRecords = [];
  //     this.error = error;
  //     // console.error(JSON.stringify(error, null, 2));
  //   }
  // }
  //    // Call this wherever you want an “imperative” refresh
  // refreshRelated() {
  //   if (this.relListWireResult) {
  //     return refreshApex(this.relListWireResult);
  //   }
  // }
    
    connectedCallback() {
      //  pubsub.subscribe('navigate', this.handleNavigate.bind(this));
       // this.fetchFieldsMeth();
        console.log('Subscribed to navigate event ', this.recordId);
      
        this.fetchRecord();

       // pubsub.subscribe('saveSuccess', this.handleEditDisableButton.bind(this));
        //pubsub.subscribe('saveSuccessEditEnable', this.handleEditEnableButton.bind(this));
    }
    
    data = {};
    error;

    // @wire(getRecordWithFieldSet, { recordId: '$recordId', objectName: '$objectApiName', fieldSetName: '$fieldSet' })
    // wiredRecord({ data, error }) {
         
    //     if (data) {
    //         this.data = data;
    //         console.log('data 61 ', JSON.stringify(this.data));
    //          // Loop through key-value pairs in the single record
    //         Object.entries(this.data).forEach(([key, value]) => {
    //            if(key=='TechnologyDecision Name'){
    //         this._name=value;
    //         console.log('this._name ',this._name);
    //     }
    //         });

    //         this.error = undefined;
    //     } else if (error) {
    //         this.error = error;
    //         this.data = {};
    //     }
    // }
    

   get fieldEntries() {
    if (!this.data) {
        return [];
    }
    // Convert the object to array of {key, label, value} for template
    return Object.entries(this.data).map(([key, value]) => {
        
        console.log(key,'&&',value);
        return {
            key: key,
            label: key,
            value: value
        };
    });
}
async fetchRecord() {
    this.isLoading = true;
    this.error = undefined;
    console.log('checking here 110');
    try {
      const result = await getRecordWithFieldSet({
        recordId: this.recordId,
        objectName: 'TechnologyDecision__c',
        fieldSetName: this.fieldSet
      });
        console.log('checking here 117');
      this.data = { ...(result || {}) };
      // Example: pull the TechnologyDecision Name out of the map-like response
      Object.entries(this.data).forEach(([key, value]) => {
        if (key === 'TechnologyDecision Name') {
          this._name = value;
          // console.log('this._name ', this._name);
        }
      });
    } catch (e) {
      this.error = e;
      this.data = {};
      // (optional) toast
      // this.dispatchEvent(new ShowToastEvent({ title: 'Error', message: e.body?.message || e.message, variant: 'error' }));
    } finally {
      this.isLoading = false;
    }
  }



handleBackToListView(event){
 this[NavigationMixin.Navigate]({
            type: 'standard__navItemPage',
            attributes: {
                apiName: 'Decision_Management' // Must match your Lightning App Page API Name
            }
        });
}
handleEdit(event){
    // this[NavigationMixin.Navigate]({
    //         type: 'standard__recordPage',
    //         attributes: {
    //             recordId: this.recordId,
    //             objectApiName: 'Technology_Decision__c', // replace with your object API name
    //             actionName: 'edit'
    //         }
    //     });
     // Create custom event with data
        const myEvent = new CustomEvent('editclicked', {
            detail: { editClick: true }  // data passed to parent
        });

        // Dispatch event
        this.dispatchEvent(myEvent);
    }
    @api async refreshdata() {
      console.log('checking here 166');
  return this.fetchRecord();
}
}
