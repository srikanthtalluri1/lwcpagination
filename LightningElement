  @AuraEnabled(cacheable=true)
    public static List<WrapperClass> getHistoryRecords(Id waiverId) {
        List<WrapperClass> historyRecords = new List<WrapperClass>();
        Set<String> uniqueKeys = new Set<String>();
        
        // Map field API names to field labels for AWP_Architecture_Waiver_Form__c
        Map<String, String> formFieldLabels = getFieldLabels('AWP_Architecture_Waiver_Form__c');
        System.debug('formFieldLabels '+formFieldLabels);
        
        // Map field API names to field labels for AWP_Waiver_Relationship__c
        Map<String, String> relationshipFieldLabels = getFieldLabels('AWP_Waiver_Relationship__c');
        
        
        // Identify lookup fields for both objects
        Map<String, String> formLookupFields = getLookupFields('AWP_Architecture_Waiver_Form__c');
        System.debug('formLookupFields '+formLookupFields);
        Map<String, String> relationshipLookupFields = getLookupFields('AWP_Waiver_Relationship__c');
        System.debug('relationshipLookupFields '+relationshipLookupFields);
        
        // Query AWP_Architecture_Waiver_Form__History
        Map<Datetime, WrapperClass> historyMap = new Map<Datetime, WrapperClass>();
        
        // Query AWP_Architecture_Waiver_Form__History
        for (AWP_Architecture_Waiver_Form__History formHistory : [
            SELECT Field, OldValue, NewValue, CreatedDate, CreatedBy.Name
            FROM AWP_Architecture_Waiver_Form__History
            WHERE ParentId = :waiverId
        ]) {
            String fieldApiName = String.valueOf(formHistory.Field).toLowerCase();
            String fieldLabel = formFieldLabels.get(fieldApiName) != null ? formFieldLabels.get(fieldApiName) : formHistory.Field;
            
            String oldValue = resolveLookupName(formLookupFields, String.valueOf(formHistory.Field).toLowerCase(), formHistory.OldValue);
            String newValue = resolveLookupName(formLookupFields, String.valueOf(formHistory.Field).toLowerCase(), formHistory.NewValue);
            
            String uniqueKey = formHistory.CreatedDate + '-' + fieldApiName + '-AWP Architecture Waiver Form';
            
            if (!uniqueKeys.contains(uniqueKey)) {
                historyRecords.add(new WrapperClass(
                    fieldLabel, 
                    //String.valueOf(formHistory.OldValue), 
                    //String.valueOf(formHistory.NewValue), 
                    oldValue,
                    newValue,
                    formHistory.CreatedDate, 
                    formHistory.CreatedBy.Name, 
                    formHistory.CreatedById,
                    'AWP Architecture Waiver Form'
                ));
                uniqueKeys.add(uniqueKey);
            }
            
            
            historyMap.put(
                formHistory.CreatedDate,
                new WrapperClass(
                    fieldLabel, 
                    String.valueOf(formHistory.OldValue), 
                    String.valueOf(formHistory.NewValue), 
                    formHistory.CreatedDate, 
                    formHistory.CreatedBy.Name, 
                    formHistory.CreatedById,
                    'AWP Architecture Waiver Form'
                )
            );
            
        }
        
        // Get the related Waiver Relationship IDs
        List<Id> relatedWaiverIds = new List<Id>();
        for (AWP_Waiver_Relationship__c waiverRel : [
            SELECT Id 
            FROM AWP_Waiver_Relationship__c 
            WHERE Waiver_Id__c = :waiverId
        ]) {
            relatedWaiverIds.add(waiverRel.Id);
        }
        
        // Query AWP_Waiver_Relationship__History
        if (!relatedWaiverIds.isEmpty()) {
            for (AWP_Waiver_Relationship__History relationshipHistory : [
                SELECT Field, OldValue, NewValue, CreatedDate, CreatedBy.Name
                FROM AWP_Waiver_Relationship__History
                WHERE ParentId IN :relatedWaiverIds
            ]) {
                String fieldApiName = String.valueOf(relationshipHistory.Field).toLowerCase();
                String fieldLabel = relationshipFieldLabels.get(fieldApiName) != null ? relationshipFieldLabels.get(fieldApiName) : relationshipHistory.Field;                
                
                
                String oldValue = resolveLookupName(relationshipLookupFields, String.valueOf(relationshipHistory.Field).toLowerCase(), relationshipHistory.OldValue);
                String newValue = resolveLookupName(relationshipLookupFields, String.valueOf(relationshipHistory.Field).toLowerCase(), relationshipHistory.NewValue);
				
                
                String uniqueKey = relationshipHistory.CreatedDate + '-' + fieldApiName + '-AWP Waiver Relationship';
                if (!uniqueKeys.contains(uniqueKey)) {                    
                    historyRecords.add(new WrapperClass(
                        fieldLabel, 
                        //String.valueOf(relationshipHistory.OldValue), 
                        //String.valueOf(relationshipHistory.NewValue),
                        oldValue,
                        newValue, 
                        relationshipHistory.CreatedDate, 
                        relationshipHistory.CreatedBy.Name, 
                        relationshipHistory.CreatedById,
                        'AWP Waiver Relationship'
                    ));
                    uniqueKeys.add(uniqueKey);
                }
                
                // Only adding if there isn't already an AWP_Architecture_Waiver_Form__c record for this CreatedDate
                if (!historyMap.containsKey(relationshipHistory.CreatedDate)) {
                    historyMap.put(
                        relationshipHistory.CreatedDate,
                        new WrapperClass(
                            fieldLabel, 
                            String.valueOf(relationshipHistory.OldValue), 
                            String.valueOf(relationshipHistory.NewValue), 
                            relationshipHistory.CreatedDate, 
                            relationshipHistory.CreatedBy.Name, 
                            relationshipHistory.CreatedById,
                            'AWP Waiver Relationship'
                        )
                    );
                }
                
            }
        }
        
        
        // Sort records by CreatedDate in descending order
        //historyRecords = new List<WrapperClass>(historyMap.values());
        historyRecords.sort(new WrapperComparator());
        
        return historyRecords;
    }
    
    // Helper class for sorting by CreatedDate in descending order
    public class WrapperComparator implements Comparator<WrapperClass> {
        public Integer compare(WrapperClass a, WrapperClass b) {
            // Custom comparison logic for Datetime
            if (a.createdDate > b.createdDate) {
                return -1; // a comes before b
            } else if (a.createdDate < b.createdDate) {
                return 1; // b comes before a
            } else {
                return 0; // a and b are equal
            }
        }
    }
    
    
    // Helper method to resolve lookup names
    private static String resolveLookupName(Map<String, String> lookupFields, String fieldApiName, Object value) {
        System.debug('lookupFields 248 '+lookupFields);
        System.debug('fieldApiName 248 '+fieldApiName);
        System.debug('value 248 '+value);
        if (value == null || !lookupFields.containsKey(fieldApiName)) {
            return String.valueOf(value);
        }
        
        // Query the related record to fetch the Name field
        String relatedObject = lookupFields.get(fieldApiName);
        List<SObject> relatedRecords = Database.query('SELECT Name FROM ' + relatedObject + ' WHERE Id = :value LIMIT 1');
        if (!relatedRecords.isEmpty()) {
            return String.valueOf(relatedRecords[0].get('Name'));
        }
        return String.valueOf(value);
    }
    
    // Helper method to get lookup fields
    private static Map<String, String> getLookupFields(String objectName) {
        Map<String, String> lookupFields = new Map<String, String>();
        Map<String, Schema.SObjectField> fields = Schema.getGlobalDescribe().get(objectName).getDescribe().fields.getMap();
        
        for (String fieldName : fields.keySet()) {
            Schema.DescribeFieldResult fieldDescribe = fields.get(fieldName).getDescribe();
            if (fieldDescribe.getType() == Schema.DisplayType.REFERENCE) {
                // Use getDescribe().getName() to convert the reference SObjectType to its name
                lookupFields.put(fieldName.toLowerCase(), fieldDescribe.getReferenceTo()[0].getDescribe().getName());
            }
        }
        System.debug('lookupFields '+lookupFields);
        return lookupFields;
    }


    
    private static Map<String, String> getFieldLabels(String objectName) {
        Map<String, String> fieldLabels = new Map<String, String>();
        Map<String, Schema.SObjectField> fields = Schema.getGlobalDescribe().get(objectName).getDescribe().fields.getMap();
        
        for (String fieldName : fields.keySet()) {
            fieldLabels.put(fieldName.toLowerCase(), fields.get(fieldName).getDescribe().getLabel());
        }
        return fieldLabels;
    }


    
    public class WrapperClass {
        @AuraEnabled public String fieldName;
        @AuraEnabled public String oldValue;
        @AuraEnabled public String newValue;
        @AuraEnabled public Datetime createdDate;
        @AuraEnabled public String createdBy;
        @AuraEnabled public String createdById;
        @AuraEnabled public String source;
        
        public WrapperClass(String fieldName, String oldValue, String newValue, Datetime createdDate, String createdBy, String createdById, String source) {
            this.fieldName = fieldName;
            this.oldValue = oldValue;
            this.newValue = newValue;
            this.createdDate = createdDate;
            this.createdBy = createdBy;
            this.createdById = createdById;
            this.source = source;
        }
    }
    /*Srikanth Changes*/
