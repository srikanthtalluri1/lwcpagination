
public static String buildWhereConditionForNames(List<String> names) {
    if (names == null || names.isEmpty()) {
        return ''; // No condition if list is empty
    }
    
    List<String> nonNullNames = new List<String>();
    Boolean hasNull = false;
    
    for (String s : names) {
        if (s == null) {
            hasNull = true;
        } else {
            // Escape single quotes in values
            nonNullNames.add(s.replace('\'', '\\\''));
        }
    }
    
    List<String> conditions = new List<String>();
    
    if (!nonNullNames.isEmpty()) {
        String inClause = 'Affected_Standard_Portfolio1__r.Name IN (\'' + String.join(nonNullNames, '\',\'') + '\')';
        conditions.add(inClause);
    }
    
    if (hasNull) {
        conditions.add('Affected_Standard_Portfolio1__r.Name = null');
    }
    
    return '(' + String.join(conditions, ' OR ') + ')';
}
if(fieldList.get(field) == 'Affected_Standard_Portfolio1__c'){
             List<PortfolioItem> lstportfolio = getPortfolioDomainCounts(affctedSTNames);
              fieldUniqueMap.put('modifedAffectedStandard', lstportfolio);
          }

public class DomainItem {
        @AuraEnabled public String label;
        @AuraEnabled public Integer count;
    }

    public class PortfolioItem {
        @AuraEnabled public String label;
        @AuraEnabled public Integer count;
        @AuraEnabled public List<DomainItem> domains;
    }

    @AuraEnabled(cacheable=true)
    public static List<PortfolioItem> getPortfolioDomainCounts(list<string> filterNames) {
        String whereClause = buildWhereConditionForNames(filterNames);
        system.debug('whereClause '+whereClause);
         string query = 'SELECT Affected_Standard_Portfolio1__r.Name portfolioName, Affected_Standard_Domain1__r.Name domainName,COUNT(Id) recordCount FROM AWP_Waiver_Relationship__c WHERE '
             		 + whereClause +
                    ' GROUP BY  Affected_Standard_Portfolio1__r.Name, Affected_Standard_Domain1__r.Name ORDER BY Affected_Standard_Portfolio1__r.Name' ;
           system.debug('query 1520 '+query);
        List<AggregateResult> results = Database.query(query);
        system.debug('results '+results);
        // Step 1: Query aggregated counts
       /* List<AggregateResult> results = [
            SELECT Affected_Standard_Portfolio1__r.Name portfolioName,
                   Affected_Standard_Domain1__r.Name domainName,
                   COUNT(Id) recordCount
            FROM AWP_Waiver_Relationship__c
            WHERE (
                Affected_Standard_Portfolio1__r.Name IN ('test nov 5','Test Jan 22nd','Test Sri Record')
                OR Affected_Standard_Portfolio1__r.Name = null
            )
            GROUP BY Affected_Standard_Portfolio1__r.Name,
                     Affected_Standard_Domain1__r.Name
            ORDER BY Affected_Standard_Portfolio1__r.Name
        ]; */

        // Step 2: Group by Portfolio
        Map<String, PortfolioItem> portfolioMap = new Map<String, PortfolioItem>();

        for (AggregateResult ar : results) {
            system.debug('ar '+ar);
            String portfolioName = (String)ar.get('portfolioName');
            String domainName = (String)ar.get('domainName');
            Integer count = (Integer)ar.get('recordCount');

            if (String.isBlank(portfolioName)) {
                portfolioName = 'No Data';
            }
            if (String.isBlank(domainName)) {
                domainName = 'No Data';
            }

            // Create portfolio if missing
            if (!portfolioMap.containsKey(portfolioName)) {
                PortfolioItem p = new PortfolioItem();
                p.label = portfolioName + ' (0)'; // Will update later with total
                p.count = 0;
                p.domains = new List<DomainItem>();
                portfolioMap.put(portfolioName, p);
            }

            // Add domain to portfolio
            DomainItem d = new DomainItem();
            d.label = domainName + ' (' + count + ')';
            d.count = count;
            portfolioMap.get(portfolioName).domains.add(d);

            // Increase portfolio count
            portfolioMap.get(portfolioName).count += count;
        }

        // Step 3: Update portfolio labels with correct total
        for (PortfolioItem p : portfolioMap.values()) {
            p.label = p.label.substring(0, p.label.lastIndexOf('(')).trim() + ' (' + p.count + ')';
        }

        return new List<PortfolioItem>(portfolioMap.values());
    }
