<template>
    <div class="slds-combobox_container">
        <div class={dropdownClass}>
            <!-- Input field -->
            <div class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none">
                <input type="text" 
                       class="slds-input slds-combobox__input" 
                       placeholder="Select filters..." 
                       value={searchKey}
                       oninput={handleSearch}
                       onclick={toggleDropdown}/>
             <!-- Dropdown / Drop-up icon -->
                <lightning-icon icon-name={iconName} 
                                size="x-small" 
                                class="slds-input__icon slds-input__icon_right">
                </lightning-icon>

            </div>

            <!-- Dropdown -->
            <template if:true={isDropdownOpen}>
                <div class="slds-dropdown slds-dropdown_length-5 slds-dropdown_fluid">
                    <ul class="slds-listbox slds-listbox_vertical" role="presentation">
                        <template for:each={filteredOptions} for:item="opt">
                            <li key={opt.value} role="presentation" class="slds-listbox__item">
                               <!-- <div class="slds-media slds-listbox__option slds-listbox__option_plain" role="option">
                                    <label class="slds-checkbox">
                                        <input type="checkbox" value={opt.value} checked={opt.checked} onchange={handleCheck}/>
                                        <span class="slds-checkbox_faux slds-p-right_medium"></span>
                                        <span style="padding-left: 10px;" class={opt.class}>{opt.label}</span>
                                    </label> 
                                </div> -->
                                 <div class="slds-media slds-listbox__option slds-listbox__option_plain"
                                     role="option"
                                     onclick={handleSelect}
                                     
                                     data-value={opt.value}>
                                    <span class={opt.class}>{opt.label}</span>
                                </div>
                            </li>
                        </template>
                        <template if:true={noResults}>
                            <li class="slds-listbox__item">
                                <span class="slds-p-around_small">No results found</span>
                            </li>
                        </template>
                    </ul>
                </div>
            </template>
        </div>
    </div>
</template>



import { LightningElement, track, api } from 'lwc';

export default class TechnologyDecisionCustomPick extends LightningElement {

    @track isDropdownOpen = false;
    @track searchKey = '';
    @track options = [
        { label: 'Name', value: 'Name', checked: false, class: 'slds-form-element__label' },
        { label: 'Status', value: 'Status', checked: false, class: 'slds-form-element__label' },
        { label: 'Decision Reason', value: 'Decision Reason', checked: false, class: 'slds-form-element__label' }
        
    ];
    


    get dropdownClass() {
        return `slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click ${this.isDropdownOpen ? 'slds-is-open' : ''}`;
    }

    get filteredOptions() {
        if (!this.searchKey) return this.options;
        return this.options.filter(opt =>
            opt.label.toLowerCase().includes(this.searchKey.toLowerCase())
        );
    }
    get iconName() {
        return this.isDropdownOpen ? 'utility:up' : 'utility:down';
    }

    get noResults() {
        return this.filteredOptions.length === 0;
    }

    toggleDropdown() {
        this.isDropdownOpen = !this.isDropdownOpen;
    }

    handleSearch(event) {
        this.searchKey = event.target.value;
        this.isDropdownOpen = true;
    }

   handleSelect = (event) => {
        const value = event.currentTarget.dataset.value;
        console.log('value 44', value);
        this.options = this.options.map(opt => {
            if (opt.value === value) {
                const isSelected = !opt.selected;
                return { 
                    ...opt, 
                    selected: isSelected, 
                    class: isSelected ? 'selected' : '' 
                };
            }
            this.isDropdownOpen = true; 
            return opt;
        });
                // Collect all selected values
            const selectedValues = this.options
                .filter(opt => opt.selected)
                .map(opt => opt.value);
            console.log('selectedValues ', JSON.stringify(selectedValues));
            // Dispatch to parent
            this.dispatchEvent(new CustomEvent('selectionchange', {
                detail: { values: selectedValues }
            }));
       
    }
    
}

.slds-combobox__form-element {
    min-height: 2.5rem;
    display: flex;
    align-items: center;
}
.slds-pill_container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
}
.slds-combobox_container {
    width: 330px;
}
.selected {
    font-weight: bold;
    background-color: #f3f3f3; /* optional highlight */
    border-radius: 4px;
    padding: 2px 6px;
}
