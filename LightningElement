 getUniqueValues({ fieldApiName: selectedFilter, allOrMy: this.selectedWaiver }).then((data) => {
                        const values = (data) ? Object.keys(data).map(x => {
                            if (x !== 'PortfolioDomains') {
                                return {
                                    [x]: data[x].map((val) => {
                                        //return { label: (val.value + ' (' + val.count + ')'), value: val.value };
                                        const label = val.value ? val.value : 'No Data';
                                        const value = val.value ? val.value : 'nullcheck';
                                        const id = val.id ? val.id : 'nullcheck';
                                        return { label: `${label} (${val.count})`, value: value, id: id };
                                    })
                                }
                            }
                        }).filter(Boolean) : [];//
                        /*let filteredFieldValues = values.map((x, ind) => {
                            return {
                                id: ind,
                                filterField: (this._filterOptions.filter(t => t.value === Object.keys(x)[0])[0].label),
                                filterFieldApiName: Object.keys(x)[0],
                                filteredFieldValue: Object.values(x)[0].sort((a, b) => (a.value || '').localeCompare(b.value || '')),
                                showValues: false,
                                selectedValue: [],
                                icon: 'utility:add'
                            }
                        });*/

                        /*Srikanth Changes*/
                        console.log('Processed Values:', values);
                        let filteredFieldValues = values.map((x, ind) => {
                            return {
                                id: ind,
                                filterField: (this._filterOptions.filter(t => t.value === Object.keys(x)[0])[0].label),
                                filterFieldApiName: Object.keys(x)[0],
                                filteredFieldValue: Object.values(x)[0]
                                    .sort((a, b) => {
                                        const valueA = (a.value || '').trim().toLowerCase();
                                        const valueB = (b.value || '').trim().toLowerCase();
                                        if (valueA === 'nullcheck') return -1;
                                        if (valueB === 'nullcheck') return 1;
                                        return valueA.localeCompare(valueB); // Alphabetical for others
                                    }),
                                showValues: false,
                                selectedValue: [],
                                icon: 'utility:add'
                            };
                        });
                        console.log('Filtered Field Values (sorted by value):', JSON.stringify(filteredFieldValues));
                        /*Srikanth Changes*/

                        this._filteredFieldValues = [...filteredFieldValues];
                        this.isLoadingFilter = false;



                        /*Srikanth Port & Domain Changes*/
                        // Process portfolio and domain data
                        console.log('data.PortfolioDomains:', data.PortfolioDomains);
                        const portfolioDomains = data.PortfolioDomains || {};
                        const portfolioDomainList = Object.keys(portfolioDomains).map((portfolioId) => {
                            return {
                                portfolioId: portfolioId,
                                domains: portfolioDomains[portfolioId].map((domain) => ({
                                    id: domain.id,
                                    name: domain.name
                                }))
                            };
                        });

                        console.log('Portfolio and Domain Data:', JSON.stringify(portfolioDomainList));

                        // Update LWC data
                        //this._filteredFieldValues = [...values];
                        //this.isLoadingFilter = false;
                        this.portfolioDomains = portfolioDomainList;
                        console.log('this.portfolioDomains:', JSON.stringify(this.portfolioDomains));

                        this._filteredFieldValues = [...filteredFieldValues];
                        this.isLoadingFilter = false;
                        /*Srikanth Port & Domain Changes*/


                        // Publish the event with the payload
                        const payload3 = {
                            _filteredFieldValues: this._filteredFieldValues,
                            totalRecords: this.totalRecords,
                            totalPages: this.totalPages,
                            isLoadingFilter: this.isLoadingFilter,
                            selectedWaiver: this.selectedWaiver,
                            selectedFilter: this.selectedFilter
                        };
                        console.log('payload check at 584 ' + JSON.stringify(payload3));
                        pubsub.publish('filterBy', payload3);

                    }).catch((error) => {
                        console.error(error);
                        this.isLoadingFilter = false;
                    });
                } else {
                    this.selectedFilter = '';
                }

                break;
            default:
                break;
        }
    }
