 // New logic to get count
        List<Object> uniqueValues = new List<Object>();
       string query = 'SELECT  Affected_Standard_Domain1__c, COUNT(Id) ' +
                    'FROM AWP_Waiver_Relationship__c ' + condition +
                    ' GROUP BY  Affected_Standard_Domain1__c' ;
        List<AggregateResult> agResult = Database.query(query);
         // After aggregation, fetch the portfolio names using a second query
        Set<Id> domainIds = new Set<Id>();
        
                for (AggregateResult ar : agResult) {
                    domainIds.add((Id) ar.get('Affected_Standard_Domain1__c'));
                }
            
        System.debug('domainIds '+domainIds);
        
        // Fetch the related names for the portfolio IDs
        Map<Id, String> domainNameMap = new Map<Id, String>();
        if (!domainIds.isEmpty()) {
            List<TPM_Domain__c > domains = [SELECT Id, Name FROM TPM_Domain__c  WHERE Id IN :domainIds];
            for (TPM_Domain__c domain : domains) {
                domainNameMap.put(domain.Id, domain.Name);
            }
        }
        System.debug('domainNameMap '+domainNameMap);
        
        for (AggregateResult ar : agResult) {
                  //String portfolioName = (String) ar.get('Affected_Standard_Portfolio1__r.Name');
                  Id domainId = (Id) ar.get('Affected_Standard_Domain1__c');
                  Map<String, Object> uni = new Map<String, Object>();
                  String domainName = domainNameMap.get(domainId);
            	  uni.put('value', domainName);  // Domain Name as label
                  uni.put('id', domainId);  // Domain Id
                  uni.put('count', (Integer) ar.get('expr0'));  // The count of related records
                  uniqueValues.add((Object) uni);
                  
              }
        fieldUniqueMap.put('PortfolioDomains', uniqueValues);
        //End of new logic to get count
         List<AWP_Waiver_Relationship__c> waiverRecords;
