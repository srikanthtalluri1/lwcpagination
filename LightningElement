@isTest
public class AWP_WaiverHandlerClassTest {

    @TestSetup
    static void setupTestData() {
        // Create test users
        User testUser = new User(
            ProfileId = [SELECT Id FROM Profile WHERE Name = 'Standard User'].Id,
            LastName = 'TestUser',
            Email = 'testuser@example.com',
            Username = 'testuser@example.com' + System.currentTimeMillis(),
            Alias = 'tuser',
            TimeZoneSidKey = 'America/Los_Angeles',
            LocaleSidKey = 'en_US',
            EmailEncodingKey = 'UTF-8',
            LanguageLocaleKey = 'en_US'
        );
        insert testUser;

        System.runAs(testUser) {
        // Create test permission set
        PermissionSet ps = new PermissionSet(
            Name = 'See_All_Waivers',
            Label = 'See All Waivers'
        );
        insert ps;

        // Assign permission set to the test user
        PermissionSetAssignment psa = new PermissionSetAssignment(
            AssigneeId = testUser.Id,
            PermissionSetId = ps.Id
        );
        insert psa;
        }

        // Create test waiver records
        List<AWP_Architecture_Waiver_Form__c> waiverForms = new List<AWP_Architecture_Waiver_Form__c>();
        for (Integer i = 0; i < 5; i++) {
            waiverForms.add(new AWP_Architecture_Waiver_Form__c(
                Name = 'Test Waiver ' + i,
                Status__c = 'Approved',
                Type__c = 'Application',
                Waiver_Reason__c = 'Test Reason',
                BARR_Risk_Level_UI__c = 'Low',
                Requesting_Portfolio__c = 'Request1',
                App_Name__c = 'Test App',
                Standard_Page_Title__c = 'Test Title'
            ));
        }
        insert waiverForms;

        
        
        
        // Create test portfolio and domain records
        TPM_Port__c portfolio = new TPM_Port__c(Name = 'Test Portfolio');
        insert portfolio;
        
        TPM_Domain__c domain = new TPM_Domain__c(Name = 'Test Domain', Port__c = portfolio.Id);
        insert domain;
        
        
        // Create test waiver relationship records
        List<AWP_Waiver_Relationship__c> waiverRelationships = new List<AWP_Waiver_Relationship__c>();
        for (AWP_Architecture_Waiver_Form__c waiver : waiverForms) {
            waiverRelationships.add(new AWP_Waiver_Relationship__c(
                Waiver_Id__c = waiver.Id,
                Requesting_Application__c = 'Test App',
                Affected_Standard_Portfolio__c = 'Test1',
                Affected_Standard_Portfolio1__c = portfolio.Id
            ));
        }
        insert waiverRelationships;
        
    }

    @isTest
    static void testGetWaiverRecordAndPermissions() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with various parameters
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'asc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                '', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Application', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }
    
    @isTest
    static void testGetWaiverRecordAndPermissionsCommunication() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with various parameters
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'asc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                '', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Communication', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            //System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }
    
    @isTest
    static void testGetWaiverRecordAndPermissionsBusiness() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with various parameters
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'asc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                '', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Business', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            //System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }
    
    @isTest
    static void testGetWaiverRecordAndPermissionsData() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with various parameters
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'asc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                '', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Data', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            //System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }
    
    @isTest
    static void testGetWaiverRecordAndPermissionsTechnology() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with various parameters
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'asc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                '', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Technology', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            //System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }

    @isTest
    static void testGetWaiverRecordAndPermissionsWithFilters() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with filters
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'asc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                '', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[{"Status":["Approved"]}]', // filters
                'Application', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }

    @isTest
    static void testGetWaiverRecordAndPermissionsWithMyWaivers() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method for "My Waivers"
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'asc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                '', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'mywaivers', // allOrMy
                '[]', // filters
                'Application', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            //System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }

    @isTest
    static void testGetWaiverRecordAndPermissionsWithNullFilters() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with null filters
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'asc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                '', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[{"Status":["nullcheck"]}]', // filters
                'Application', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            //System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }

    @isTest
    static void testGetWaiverRecordAndPermissionsWithSorting() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with sorting
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'desc', // sortOrder
                10, // pageSize
                'tt', // after
                '', // lastId
                '', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Application', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }
    
    
    @isTest
    static void testGetWaiverRecordAndPermissionsWithSortingBefore() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with sorting
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'desc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                'tt', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Application', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }
    
    @isTest
    static void testGetWaiverRecordAndPermissionsWithSortingBeforeNull() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with sorting
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'desc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                'NULL', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Application', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }
    
    @isTest
    static void testGetWaiverRecordAndPermissionsWithSortingBeforeAsc() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with sorting
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'asc', // sortOrder
                10, // pageSize
                '', // after
                '', // lastId
                'tt', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Application', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }
    
    @isTest
    static void testGetWaiverRecordAndPermissionsWithSortingAfterNull() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with sorting
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'desc', // sortOrder
                10, // pageSize
                'NULL', // after
                '', // lastId
                'tt', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Application', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }
    
    
    @isTest
    static void testGetWaiverRecordAndPermissionsWithSortingAfterAsc() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];

        // Run as the test user
        System.runAs(testUser) {
            // Call the method with sorting
            Map<String, Object> result = AWP_WaiverHandlerClass.getWaiverRecordAndPermissions(
                'Test', // searchKey
                'Waiver_Id__r.Name', // sortBy
                'asc', // sortOrder
                10, // pageSize
                'tt', // after
                '', // lastId
                'tt', // before
                '', // firstId
                false, // first
                false, // last
                0, // lastPageSize
                'allwaivers', // allOrMy
                '[]', // filters
                'Application', // tab
                10, // limitSize
                0 // offset
            );

            // Verify the results
            System.assertNotEquals(null, result.get('waiverRecords'), 'Waiver records should not be null');
            System.assertNotEquals(0, result.get('waiverRecordsCount'), 'Waiver records count should not be zero');
        }
    }
    
    @isTest
    static void testGetUniqueValuesAllWaivers() {
        // Call the method for all waivers
        List<String> fieldApiNames = new List<String>{ 'BARR Risk Level', 'Waiver Reason', 'Status' };
            Map<String, Object> result = AWP_WaiverHandlerClass.getUniqueValues(fieldApiNames, 'allwaivers');
        
        // Verify the results
        System.assertNotEquals(null, result.get('BARR Risk Level'), 'BARR Risk Level values should not be null');
        System.assertNotEquals(null, result.get('Waiver Reason'), 'Waiver Reason values should not be null');
        System.assertNotEquals(null, result.get('Status'), 'Status values should not be null');
        System.assertNotEquals(null, result.get('PortfolioDomains'), 'PortfolioDomains should not be null');
    }
    
    @isTest
    static void testGetUniqueValuesMyWaivers() {
        // Get the test user
        User testUser = [SELECT Id FROM User WHERE LastName = 'TestUser' LIMIT 1];
        
        // Run as the test user
        System.runAs(testUser) {
            // Call the method for my waivers
            List<String> fieldApiNames = new List<String>{ 'BARR Risk Level', 'Waiver Reason', 'Status' };//, 'Affected Standard Portfolio'
                Map<String, Object> result = AWP_WaiverHandlerClass.getUniqueValues(fieldApiNames, 'mywaivers');
            
            // Verify the results
            System.assertNotEquals(null, result.get('BARR Risk Level'), 'BARR Risk Level values should not be null');
            System.assertNotEquals(null, result.get('Waiver Reason'), 'Waiver Reason values should not be null');
            System.assertNotEquals(null, result.get('Status'), 'Status values should not be null');
            System.assertNotEquals(null, result.get('PortfolioDomains'), 'PortfolioDomains should not be null');
        }
    }
    
    @isTest
    static void testGetUniqueValuesEmptyFields() {
        // Call the method with empty field list
        List<String> fieldApiNames = new List<String>();
        Map<String, Object> result = AWP_WaiverHandlerClass.getUniqueValues(fieldApiNames, 'allwaivers');
        
        // Verify the results
        //System.assertEquals(true, result.isEmpty(), 'Result should be empty for empty field list');
    }
    
    @isTest
    static void testFetchFields() {
        // Create a test waiver record
        AWP_Architecture_Waiver_Form__c waiver = new AWP_Architecture_Waiver_Form__c(
            Name = 'Test Waiver',
            Status__c = 'Approved',
            Type__c = 'Application',
            Waiver_Reason__c = 'Test Reason',
            BARR_Risk_Level_UI__c = 'Low',
            Requesting_Portfolio__c = 'Request1',
            App_Name__c = 'Test App',
            Standard_Page_Title__c = 'Test Title'
        );
        insert waiver;
        
        // Call the method
        AWP_WaiverHandlerClass.ReturnWP result = AWP_WaiverHandlerClass.fetchFields(
            waiver.Id,
            'AWP_Architecture_Waiver_Form__c',
            'Your_Field_Set_Name' // Replace with the actual field set name
        );
        
        // Verify the results
        System.assertNotEquals(null, result.objectLabelName, 'Object label name should not be null');
        //System.assertNotEquals(null, result.fieldsAPI, 'Fields API list should not be null');
    }
    
    @isTest
    static void testFetchFieldsInvalidId() {
        // Call the method with invalid record ID
        AWP_WaiverHandlerClass.ReturnWP result = AWP_WaiverHandlerClass.fetchFields(
            'InvalidId',
            'AWP_Architecture_Waiver_Form__c',
            'CompactPanelFieldSet' // Replace with the actual field set name
        );
        
        // Verify the results
        //System.assertEquals('Invalid Id', result.message, 'Error message should match for invalid ID');
    }
    
    @isTest
    static void testFetchFieldsInvalidFieldSet() {
        // Create a test waiver record
        AWP_Architecture_Waiver_Form__c waiver = new AWP_Architecture_Waiver_Form__c(
            Name = 'Test Waiver',
            Status__c = 'Approved',
            Type__c = 'Application',
            Waiver_Reason__c = 'Test Reason',
            BARR_Risk_Level_UI__c = 'Low',
            Requesting_Portfolio__c = 'Request1',
            App_Name__c = 'Test App',
            Standard_Page_Title__c = 'Test Title'
        );
        insert waiver;
        
        // Call the method with invalid field set name
        AWP_WaiverHandlerClass.ReturnWP result = AWP_WaiverHandlerClass.fetchFields(
            waiver.Id,
            'AWP_Architecture_Waiver_Form__c',
            'Invalid_Field_Set_Name'
        );
        
        // Verify the results
        System.assertEquals('Field Set provided is not Valid', result.message, 'Error message should match for invalid field set');
    }
    
    
     @isTest
    static void testFetchFieldsNullFieldSet() {
        // Create a test waiver record
        AWP_Architecture_Waiver_Form__c waiver = new AWP_Architecture_Waiver_Form__c(
            Name = 'Test Waiver',
            Status__c = 'Approved',
            Type__c = 'Application',
            Waiver_Reason__c = 'Test Reason',
            BARR_Risk_Level_UI__c = 'Low',
            Requesting_Portfolio__c = 'Request1',
            App_Name__c = 'Test App',
            Standard_Page_Title__c = 'Test Title'
        );
        insert waiver;
        
        // Call the method with invalid field set name
        AWP_WaiverHandlerClass.ReturnWP result = AWP_WaiverHandlerClass.fetchFields(
            waiver.Id,
            'AWP_Architecture_Waiver_Form__c',
            ''
        );
        
        // Verify the results
        //System.assertEquals('Field Set provided is not Valid', result.message, 'Error message should match for invalid field set');
    }
    
    
    @isTest
    static void testGetFilterDetailsAllWaivers() {
        // Call the method for the 'All_Waivers' tab
        Map<String, Object> result = AWP_WaiverHandlerClass.getFilterDetails('All_Waivers');
        
        // Verify the results
        System.assertNotEquals(null, result.get('filterOptions'), 'Filter options should not be null');
        List<Object> filterOptions = (List<Object>) result.get('filterOptions');
        System.assert(!filterOptions.isEmpty(), 'Filter options should not be empty');
    }
    
    @isTest
    static void testGetFilterDetailsOtherTab() {
        // Call the method for a tab other than 'All_Waivers'
        Map<String, Object> result = AWP_WaiverHandlerClass.getFilterDetails('Application');
        
        // Verify the results
        System.assertNotEquals(null, result.get('filterOptions'), 'Filter options should not be null');
        List<Object> filterOptions = (List<Object>) result.get('filterOptions');
        System.assert(!filterOptions.isEmpty(), 'Filter options should not be empty');
        
        // Ensure 'Type' is not included in the filter options
        Boolean typeFieldExists = false;
        for (Object filterOption : filterOptions) {
            Map<String, Object> option = (Map<String, Object>) filterOption;
            if (option.get('label') == 'Type') {
                typeFieldExists = true;
                break;
            }
        }
        System.assertEquals(false, typeFieldExists, 'Type field should not be included for non-All_Waivers tabs');
    }
    
    @isTest
    static void testGetFilterDetailsNullTab() {
        // Call the method with a null tab name
        Map<String, Object> result = AWP_WaiverHandlerClass.getFilterDetails(null);
        
        // Verify the results
        System.assertNotEquals(null, result.get('filterOptions'), 'Filter options should not be null');
        List<Object> filterOptions = (List<Object>) result.get('filterOptions');
        System.assert(!filterOptions.isEmpty(), 'Filter options should not be empty');
    }
    
    @isTest
    static void testGetFilterDetailsEmptyTab() {
        // Call the method with an empty tab name
        Map<String, Object> result = AWP_WaiverHandlerClass.getFilterDetails('');
        
        // Verify the results
        System.assertNotEquals(null, result.get('filterOptions'), 'Filter options should not be null');
        List<Object> filterOptions = (List<Object>) result.get('filterOptions');
        System.assert(!filterOptions.isEmpty(), 'Filter options should not be empty');
    }
    
}
