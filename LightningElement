@AuraEnabled(cacheable=true)//Map<String, List<Object>>
  public static Map<String, Object> getUniqueValues(
    List<String> fieldApiName,
    String allOrMy
  ) {
    try {
      Map<String, List<AggregateResult>> results = new Map<String, List<AggregateResult>>();
      //Map<String, List<Object>> fieldUniqueMap = new Map<String, List<Object>>();
      Map<String, Object> fieldUniqueMap = new Map<String, Object>();
      String condition = '';
      if (allOrMy == 'mywaivers') {
        condition += ' WHERE Waiver_Id__r.OwnerId = \'' + userId + '\' ';
      }

      List<String> tempFieldList = new List<String>{
        'BARR Risk Level',
        'Waiver Reason',
        'Status'
      };

      Integer maxQueriesAllowed = Limits.getLimitQueries() - Limits.getQueries(); // Just for safety

/*for (String field : fieldApiName) {
    if (!fieldList.containsKey(field)) continue;

    if (Limits.getQueries() < maxQueriesAllowed) {
        String query = '';

        if (fieldList.get(field) == 'Affected_Standard_Portfolio1__c') {
            query = 'SELECT Affected_Standard_Portfolio1__c,Affected_Standard_Portfolio1__r.Name, COUNT(Id) ' +
                    'FROM AWP_Waiver_Relationship__c ' + condition +
                    ' GROUP BY Affected_Standard_Portfolio1__c,Affected_Standard_Portfolio1__r.Name';
        } else {
            query = 'SELECT ' + fieldList.get(field) + ', COUNT(Id) ' +
                    'FROM AWP_Waiver_Relationship__c ' + condition +
                    ' GROUP BY ' + fieldList.get(field);
        }

        results.put(field, Database.query(query));
    } else {
        // Optional: Log or handle case when you're about to exceed limits
        System.debug('Skipping query for field: ' + field + ' to avoid governor limits.');
    }
} */
        //Srikant 9 April to write query out of for loop
        /*Set<String> fieldsToReplace = new Set<String>{
          'Waiver_Reason__c', 
              'Requesting_Portfolio__c', 
              'Status__c', 
              'Standard_Page_Title__c',
              'Type__c',
              'Stage__c'
              }; 
		 'Requesting Application' => 'Requesting_Application__c',
    'Affected Standard' => 'Affected_Standard_Portfolio1__c',
    'BARR Risk Level' => 'Waiver_Id__r.BARR_Risk_Level_UI__c',
    'Waiver Reason' => 'Waiver_Id__r.Waiver_Reason__c',
    'Status' => 'Waiver_Id__r.Status__c',
    'Type' => 'Waiver_Id__r.Type__c'*/
        String query = '';
        string fieldApiNameString = string.join(fieldApiName,',');
        if(fieldApiNameString.contains('Affected Standard')){
            query = 'SELECT Affected_Standard_Portfolio1__c,Affected_Standard_Portfolio1__r.Name, COUNT(Id) ' +
                    'FROM AWP_Waiver_Relationship__c ' + condition +
                    ' GROUP BY Affected_Standard_Portfolio1__c,Affected_Standard_Portfolio1__r.Name';
            results.put('Affected Standard', Database.query(query));
        }
        if(fieldApiNameString.contains('Requesting Application')){
            query = 'SELECT Requesting_Application__c, COUNT(Id) ' +
                    'FROM AWP_Waiver_Relationship__c ' + condition +
                    ' GROUP BY Requesting_Application__c' ;
            results.put('Requesting Application', Database.query(query));
        }
        if(fieldApiNameString.contains('BARR Risk Level')){
            query = 'SELECT Waiver_Id__r.BARR_Risk_Level_UI__c, COUNT(Id) ' +
                    'FROM AWP_Waiver_Relationship__c ' + condition +
                    ' GROUP BY Waiver_Id__r.BARR_Risk_Level_UI__c' ;
            results.put('BARR Risk Level', Database.query(query));
        }
        if(fieldApiNameString.contains('Waiver Reason')){
            query = 'SELECT Waiver_Id__r.Waiver_Reason__c, COUNT(Id) ' +
                    'FROM AWP_Waiver_Relationship__c ' + condition +
                    ' GROUP BY Waiver_Id__r.Waiver_Reason__c' ;
            results.put('Waiver Reason', Database.query(query));
        }
        if(fieldApiNameString.contains('Status')){
            query = 'SELECT Waiver_Id__r.Status__c, COUNT(Id) ' +
                    'FROM AWP_Waiver_Relationship__c ' + condition +
                    ' GROUP BY Waiver_Id__r.Status__c' ;
             results.put('Status', Database.query(query));
        }
        if(fieldApiNameString.contains('Type')){
            query = 'SELECT Waiver_Id__r.Type__c, COUNT(Id) ' +
                    'FROM AWP_Waiver_Relationship__c ' + condition +
                    ' GROUP BY Waiver_Id__r.Type__c' ;
             results.put('Type', Database.query(query));
        }
	//Srikant 9 April to write query out of for loop
        
        // After aggregation, fetch the portfolio names using a second query
        Set<Id> portfolioIds = new Set<Id>();
        for (String field : results.keySet()) {
            if (fieldList.get(field) == 'Affected_Standard_Portfolio1__c') {/*Feb 15th Changes*/
                for (AggregateResult ar : results.get(field)) {
                    portfolioIds.add((Id) ar.get('Affected_Standard_Portfolio1__c'));
                }
            }
        }
        System.debug('portfolioIds '+portfolioIds);
        
        // Fetch the related names for the portfolio IDs
        Map<Id, String> portfolioNameMap = new Map<Id, String>();
        if (!portfolioIds.isEmpty()) {
            List<TPM_Port__c> portfolios = [SELECT Id, Name FROM TPM_Port__c WHERE Id IN :portfolioIds];
            for (TPM_Port__c portfolio : portfolios) {
                portfolioNameMap.put(portfolio.Id, portfolio.Name);
            }
        }
        System.debug('portfolioNameMap '+portfolioNameMap);
        
      for (String field : results.keySet()) {
        List<Object> uniqueValues = new List<Object>();
          /*Feb 15th Changes - 914*/
          if (fieldList.get(field) != 'Affected_Standard_Portfolio__c' && fieldList.get(field) != 'Affected_Standard_Portfolio1__c') {
              for (AggregateResult ar : results.get(field)) {
                  Map<String, Object> uni = new Map<String, Object>();
                  uni.put(
                      'value',
                      (String) ar.get((fieldList.get(field)).replace('Waiver_Id__r.', ''))
                  );
                  uni.put('count', (Integer) ar.get('expr0'));
                  
                  uniqueValues.add((Object) uni);
                  // }
                  // else if (
                  //   field == 'Affected Standard Portfolio' ||
                  //   field == 'Requesting Application'
                  // ) {
                  //   uni.put('value', (String) ar.get('Name'));
                  //   uni.put('count', (Integer) ar.get('expr0'));
                  //   uniqueValues.add((Object) uni);
                  // }
                  
                  System.debug('uniqueValues '+uniqueValues);
              }
          }
          
          
          // Now, process the aggregate results and include the names and IDs
          /*Feb 15th Changes - 940*/
          if (fieldList.get(field) == 'Affected_Standard_Portfolio__c' || fieldList.get(field) == 'Affected_Standard_Portfolio1__c') {
              for (AggregateResult ar : results.get(field)) {
                  //String portfolioName = (String) ar.get('Affected_Standard_Portfolio1__r.Name');
                  Id portfolioId = (Id) ar.get('Affected_Standard_Portfolio1__c');
                  Map<String, Object> uni = new Map<String, Object>();
                  String portfolioName = portfolioNameMap.get(portfolioId);
                  uni.put('value', portfolioName);  // Portfolio Name as label
                  uni.put('id', portfolioId);  // Portfolio Id
                  uni.put('count', (Integer) ar.get('expr0'));  // The count of related records
                  uniqueValues.add((Object) uni);
                  
              }
          }
          
          
        fieldUniqueMap.put(field, uniqueValues);
      }
        

        // Process new functionality: Portfolios and related Domains
        Map<String, List<Object>> portfolioDomainMap = new Map<String, List<Object>>();
        List<TPM_Domain__c> domains = [
            SELECT Id, Port__c, Name
            FROM TPM_Domain__c
            WHERE Port__c IN (
                SELECT Affected_Standard_Portfolio1__c
                FROM AWP_Waiver_Relationship__c
                WHERE Affected_Standard_Portfolio1__c != NULL
            )
        ];
        
        for (TPM_Domain__c domain : domains) {
            if (!portfolioDomainMap.containsKey(domain.Port__c)) {
                portfolioDomainMap.put(domain.Port__c, new List<Object>());
            }
            Map<String, Object> domainData = new Map<String, Object>();
            domainData.put('id', domain.Id);
            domainData.put('name', domain.Name);
            portfolioDomainMap.get(domain.Port__c).add(domainData);
        }
        
        fieldUniqueMap.put('PortfolioDomains', portfolioDomainMap);
        
      return fieldUniqueMap;
    } catch (Exception e) {
      System.debug('message' + e.getMessage());
      System.debug('stack' + e.getStackTraceString());
      throw new AuraHandledException(e.getMessage());
    }
  }
