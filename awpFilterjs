/* eslint-disable @lwc/lwc/no-api-reassignments */
import { LightningElement, wire, api, track } from 'lwc';
import { CurrentPageReference, NavigationMixin } from 'lightning/navigation';
import {ShowToastEvent} from 'lightning/platformShowToastEvent';


import NAME_FIELD from '@salesforce/schema/AWP_Architecture_Waiver_Form__c.Name';
import REVENUE_FIELD from '@salesforce/schema/AWP_Architecture_Waiver_Form__c.Waiver_Reason__c';
import INDUSTRY_FIELD from '@salesforce/schema/AWP_Architecture_Waiver_Form__c.Status__c';
import BARR_RISK_FIELD from '@salesforce/schema/AWP_Architecture_Waiver_Form__c.BARR_Risk_Level_UI__c';

import REQUEST_PORTFOLIO_FIELD from '@salesforce/schema/AWP_Architecture_Waiver_Form__c.Requesting_Portfolio__c';
import REQUEST_TPM_FIELD from '@salesforce/schema/AWP_Architecture_Waiver_Form__c.Requesting_TPM__c';

import fetchWaiverDetails from '@salesforce/apex/WaiverController.fetchWaiverDetails';
import getStatusPicklistValues from '@salesforce/apex/WaiverController.getStatusPicklistValues';
import saveWaiver from '@salesforce/apex/WaiverController.saveWaiver';
import pubsub from 'c/pubsub';

const WAIVERFIELDSCOL1 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

const WAIVERFIELDSCOL2 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

const WAIVERFIELDSCOL3 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

const WAIVERFIELDSCOL4 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

const WAIVERFIELDSCOL5 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

const WAIVERFIELDSCOL6 = [
    { fieldName: 'Name' },
    { fieldName: 'Waiver_Reason__c' },
    { fieldName: 'Status__c' }
];

export default class WaiversRecordPage extends LightningElement {

    // Inline Edit
    @api editClick;

    @api recordId;
    @api objectApiName;
    @api set recordName(value) {
        if (value) {
            this._name = value;
        }
    }
    get recordName() {
        return this._name;
    }
    _name = '';
    _fields = [];

    fieldsWaiversDetails = [NAME_FIELD, REVENUE_FIELD, INDUSTRY_FIELD, BARR_RISK_FIELD];
    fieldsDomain = [REQUEST_PORTFOLIO_FIELD, REQUEST_TPM_FIELD];



    activeSections = ['waiverDetail', 'requestingDomainPortfolio','affectedDomainPortfolio','standardDetails'];


    @track name = '';
    @track status = '';
    @track statusOptions = [];
    @track rationaleForWaiver = '';
    @track renewCounter = '';
    @track originalWaiverSubmissionDate = '';



    get waiverFields() {
        return {
            col1: WAIVERFIELDSCOL1,
            col2: WAIVERFIELDSCOL2,
            col3: WAIVERFIELDSCOL3,
            col4: WAIVERFIELDSCOL4,
            col5: WAIVERFIELDSCOL5,
            col6: WAIVERFIELDSCOL6,
        }
    }

    get contactFields() {
        return {
            col1: WAIVERFIELDSCOL1,
            col2: WAIVERFIELDSCOL2,
            col3: WAIVERFIELDSCOL3,
            col4: WAIVERFIELDSCOL4,
            col5: WAIVERFIELDSCOL5,
            col6: WAIVERFIELDSCOL6,
        }

    }

    get approvalFields() {
        return {
            col1: WAIVERFIELDSCOL1,
            col2: WAIVERFIELDSCOL2,
            col3: WAIVERFIELDSCOL3,
            col4: WAIVERFIELDSCOL4,
            col5: WAIVERFIELDSCOL5,
            col6: WAIVERFIELDSCOL6,
        }
    }

    get historyFields() {
        return {
            col1: WAIVERFIELDSCOL1,
            col2: WAIVERFIELDSCOL2,
            col3: WAIVERFIELDSCOL3,
            col4: WAIVERFIELDSCOL4,
            col5: WAIVERFIELDSCOL5,
            col6: WAIVERFIELDSCOL6,
        }
    }

    @wire(CurrentPageReference)
    getPageReferenceParameters(currentPageReference) {
        if (!this.recordId && !this.objectApiName) {
            if (currentPageReference.attributes?.recordId) {
                this.recordId = currentPageReference.attributes.recordId;
            }
            if (currentPageReference.attributes?.objectApiName) {
                this.objectApiName = currentPageReference.attributes.objectApiName;
            }
        }
    }

    recordIdOriginal;

    connectedCallback() {
        console.log(this.recordId, '====', this.objectApiName);
        this.recordIdOriginal = this.recordId;

        console.log('this.editClick', '====', this.editClick);
        pubsub.subscribe('editClick', this.handleEditDisablingButton.bind(this));
        console.log('Subscribed to saveSuccess event');

        // Fetch picklist options for Status
        getStatusPicklistValues()
            .then(result => {
                this.statusOptions = result.map(status => ({ label: status, value: status }));
            })
            .catch(error => {
                console.error('Error fetching picklist values:', error);
            });

        // Fetch waiver details
        fetchWaiverDetails({ recordId: this.recordId })
            .then(data => {
                if (data) {
                    this.name = data.Name;
                    this.status = data.Status;
                    this.waiverReason = data.waiverReason;
                    //this.rationaleForWaiver = data.RationaleForWaiver;
                    this.renewCounter = data.RenewCounter;
                    //this.originalWaiverSubmissionDate = data.OriginalWaiverSubmissionDate;
                }
            })
            .catch(error => {
                console.error('Error fetching waiver details:', error);
            });

    }

    handleEditDisablingButton(event) {
        console.log('event fired 190'+JSON.stringify(event));
        this.disablingButton = event;
        if(this.disablingButton){
            this.editClick = false;
        }
        else{
            this.editClick = true;
        }
    }


    @track waiverData = {};
    disablingButton = true;
    handleInputChangeValid(event) {
        const field = event.target.dataset.field;
        this.waiverData[field] = event.target.value;
    }
    handleSave() {
        saveWaiver({ waiverData: this.waiverData, recordId: this.recordId })
            .then(() => {
                this.showToast('Success', 'Waiver saved successfully.', 'success');
                this.editClick = false;
                this.disablingButton = true;
                pubsub.publish('saveSuccess', false);

                
            })
            .catch((error) => {
                this.showToast('Error', error.body.message, 'error');
                pubsub.publish('saveSuccess', true);
            });
    }

    showToast(title, message, variant) {
        this.dispatchEvent(new ShowToastEvent({ title, message, variant }));
    }
    handleCancelWaiver(event){
        console.log('oncancel event recordEditForm');
        this.editClick = false;
        this.disablingButton = true;
        pubsub.publish('saveSuccess', false);
    }



    handleActions(event) {
        const actionName = event.target.dataset.action;
        console.log('actionName', actionName);
        switch (actionName) {
            case 'edit':
                this.handleEdit(event);
                break;
            case 'approval':
                this.handleApproval(event);
                break;
            case 'withdraw':
                this.handleWithdraw(event);
                break;
            default:
                break;
        }
    }

    handleEdit(event) {

    }

    handleApproval(event) {

    }

    handleWithdraw(event) {

    }

    handleSectionToggle(event) {
        const openSections = event.detail.openSections;
        if (openSections.length === 0) {
            this.activeSectionsMessage = 'All sections are closed';
        } else {
            this.activeSectionsMessage =
                'Open sections: ' + openSections.join(', ');
        }
    }

    handleTabClick(event) {
        this.template.querySelectorAll('li').forEach((el) => {
            el.classList();
        })
    }



    handleRecordSelect(event) {
        const selectedRecordId = event.detail.recordId;
        console.log('Selected Record ID: 189 Parent ', selectedRecordId);
    }

    fieldValues = {};
    handleFieldChange(event) {
        const fieldName = event.target.fieldName;
        console.log('fieldName '+fieldName);
        const value = event.target.value;
        console.log('value '+value);
        this.fieldValues[fieldName] = value; // Store the changed value temporarily
        console.log('this.fieldValues '+JSON.stringify(this.fieldValues));
    }
    handleSubmit(event){
        event.preventDefault();
        /*const fields = event.detail.fields;
        console.log('fields '+JSON.stringify(fields));
        this.template.querySelector('lightning-record-edit-form').submit(fields);*/

        const fields1 = event.detail.fields;
        Object.assign(fields1, this.fieldValues);
        console.log('fields1 '+JSON.stringify(fields1));
        this.template.querySelectorAll('lightning-record-form').forEach(form => {
            form.submit(fields1);
        });
        this.editClick = false;
    }
    handleSuccess(event){
        console.log('onsuccess event recordEditForm', event.detail.id);
        this.dispatchEvent(
            new ShowToastEvent({
                title: "Updated",
                message: "Saved",
                variant: "success" 
            })
        )
    }
    handleCancel(event){
        console.log('oncancel event recordEditForm');
        this.editClick = false;
    }




    @track isReadonly = true;    // Controls the read-only state for first input
    @track isReadonly2 = true;   // Controls the read-only state for second input
    fieldValue = 'Initial Value'; // Example initial value for first input
    fieldValue2 = 'Second Value'; // Example initial value for second input

    handleEditClick() {
        this.isReadonly = false; // Make the first field editable
    }

    handleEditClick2() {
        this.isReadonly2 = false; // Make the second field editable
    }

    /*handleInputChange(event) {
        this.fieldValue = event.target.value;
    }

    handleInputChange2(event) {
        this.fieldValue2 = event.target.value;
    }*/
    
}
