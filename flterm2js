import { api, LightningElement } from 'lwc';
import NAME_FIELD from '@salesforce/schema/AWP_Architecture_Waiver_Form__c.Name';
import AFFECTEDPORTFOLIO_FIELD from '@salesforce/schema/AWP_Architecture_Waiver_Form__c.Affected_Standard_Portfolio__c';
import REQUESTINGTPM_FIELD from '@salesforce/schema/AWP_Architecture_Waiver_Form__c.Requesting_TPM__c';
import WAIVER_REASON_FIELD from '@salesforce/schema/AWP_Architecture_Waiver_Form__c.Waiver_Reason__c';

export default class WaiversCreateRecordPage extends LightningElement {

    objectApiName = 'AWP_Architecture_Waiver_Form__c';
    @api recordId;
    newRecordName;

    fields = [];

    get record() {
        return this.recordId;
    }

    get showEdit() {
        return this.recordId ? true : false;
    }

    connectedCallback() {
        console.log('record: ', this.record);
        if (this.record) {
            this.fields = [
                { index: 0, fieldName: NAME_FIELD, required: true },
                { index: 1, fieldName: AFFECTEDPORTFOLIO_FIELD, required: false },
                { index: 2, fieldName: REQUESTINGTPM_FIELD, required: false },
                { index: 3, fieldName: WAIVER_REASON_FIELD, required: false }
            ]
        } else {
            this.fields = [
                { index: 4, fieldName: NAME_FIELD, fieldValue: '', required: true },
                { index: 5, fieldName: AFFECTEDPORTFOLIO_FIELD, fieldValue: '', required: false },
                { index: 6, fieldName: REQUESTINGTPM_FIELD, fieldValue: '', required: false },
                { index: 7, fieldName: WAIVER_REASON_FIELD, fieldValue: '', required: false }
            ]
        }
    }

    handleSuccess(event) {
        const updatedRecord = event.detail.id;
        console.log('onsuccess: ', updatedRecord);
        this.dispatchEvent(new CustomEvent('close', {
            detail: {
                recordId: updatedRecord,
                recordName: this.newRecordName
            }
        }));
    }

    handleReset(event) {
        event.preventDefault();
        this.dispatchEvent(new CustomEvent('close'));
    }

    handleSubmit(event) {
        event.preventDefault();       // stop the form from submitting
        const fields = event.detail.fields;
        let isFormValid = false;
        this.template.querySelectorAll('lightning-input-field').forEach(element => {
            if (element.value && element.reportValidity()) {
                isFormValid = true;
            }

            if (element.fieldName === 'Name') {
                this.newRecordName = element.value;
            }
        });
        if (!isFormValid) {

            return;
        }
        this.template.querySelector('lightning-record-edit-form').submit(fields);
    }
}
