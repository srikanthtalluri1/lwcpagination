
/* eslint-disable @lwc/lwc/no-api-reassignments */
import { LightningElement, track, api } from "lwc";

export default class MultiSelectPicklist extends LightningElement {

    showDropdown;
    _showSelection;
    @track _values = [];

    @api set values(value) {
        if (value) {
            this._values = value;
            this.selectedValues = value.filter(x => x.selected === true);
        }
    }

    get values() {
        return this._values;
    }

    @track selectedValues = [];
    @api pickListLabel;
    @api set showSelection(value) {
        if (value) {
            this._showSelection = (value === 'true');
        }
    }

    get showSelection() {
        return this._showSelection;
    }

    get selectedMessage() {
        return this.selectedValues.length + " values are selected";
    }

    connectedCallback() {
        this._values.forEach((element) => (element.selected ? this.selectedValues.push(element.value) : ""));
        console.log(this.selectedValues);
    }

    handleLeave() {
        let sddCheck = this.showDropdown;
        if (sddCheck) {
            this.showDropdown = false;
            this.fetchSelectedValues();
        }
    }

    fetchSelectedValues() {
        this.selectedValues = [];
        //get all the selected values
        this.template.querySelectorAll("c-picklist-value").forEach((element) => {
            if (element.selected) {
                console.log(element.value);
                this.selectedValues.push(element.value);
            }
        });
        const eventData = {
            detail: {
                action: {
                    name: 'selectedValues'
                },
                selectedValues: this.selectedValues
            }
        }
        this.dispatchEvent(new CustomEvent('selectedvalues', eventData));
        //refresh original list
        this.refreshOriginalList();
    }

    refreshOriginalList() {
        //update the original value array to shown after close
        const picklistValues = this._values.map((eachValue) => ({ ...eachValue }));
        picklistValues.forEach((element, index) => {
            if (this.selectedValues.includes(element.value)) {
                picklistValues[index].selected = true;
            } else {
                picklistValues[index].selected = false;
            }
        });

        this._values = picklistValues;
    }

    handleShowDropdown() {
        let sdd = this.showDropdown;
        if (sdd) {
            this.showDropdown = false;
            this.fetchSelectedValues();
        } else {
            this.showDropdown = true;
        }
    }

    closePill(event) {
        console.log(event.target.dataset.value);
        let selection = event.target.dataset.value;
        let selectedPills = this.selectedValues;
        console.log(selectedPills);
        let pillIndex = selectedPills.indexOf(selection);
        console.log(pillIndex);
        this.selectedValues.splice(pillIndex, 1);
        this.refreshOriginalList();
    }
}
