/* eslint-disable @lwc/lwc/no-async-operation */

import { LightningElement, api } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import fetchFields from '@salesforce/apex/AWP_WaiverHandlerClass.fetchFields';

export default class CustomHighlightPanel extends LightningElement {

    @api recordId;
    @api objectApiName;
    @api fieldSet;
    @api get recordName() {
        return this._name;
    }
    set recordName(value) {
        if (value) {
            this._name = value;
        }
    }
    _name = '';
    fieldList = [];
    objectLabelName = '';
    intervalId;

    connectedCallback() {
        fetchFields({
            recordId: this.recordId,
            objectName: this.objectApiName,
            fieldSetName: this.fieldSet
        }).then(result => {
            if (result) {
                console.log(result);
                if (result.message) {
                    this.showToast('Error', 'error', result.message);
                    return;
                }
                // this.nameField = result.nameField;
                this.fieldList = result.fieldsAPI;
                this.objectLabelName = result.objectLabelName;
            }
        }).catch(error => {
            if (error && error.body && error.body.message) {
                this.showToast('Error', 'error', error.body.message);
            }
        });
        this.intervalId = setInterval(() => this.removeHorizontalClass(this), 1);
    }

    disconnectedCallback() {
        clearInterval(this.intervalId);
    }
    removeHorizontalClass() {
        // this.loading = false;
        this.template.querySelectorAll('lightning-output-field')?.forEach(x => {
            x.classList.remove('slds-form-element_horizontal')
        })
    }

    showToast(title, variant, message) {
        const event = new ShowToastEvent({
            title: title,
            variant: variant,
            message: message,
        });
        this.dispatchEvent(event);
    }

    handleActions(event) {
        const actionName = event.target.dataset.action;
        switch (actionName) {
            case 'edit':
                console.log('edit');
                break;
            default:
                break;
        }
    }
}
